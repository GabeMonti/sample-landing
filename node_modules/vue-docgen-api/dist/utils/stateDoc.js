"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));var _parser = _interopRequireDefault(require("./parser"));
var _getComponentModuleJSCode = _interopRequireDefault(require("./getComponentModuleJSCode"));
var _getSlots = _interopRequireDefault(require("./getSlots"));
var _getDocFile2 = _interopRequireDefault(require("./getDocFile"));var

stateDoc = /*#__PURE__*/function () {
  function stateDoc() {(0, _classCallCheck2.default)(this, stateDoc);
    this.file = '';
    this.docComponent = {};
    this.sourceComponent = '';
    this.docMixins = [];
    this.jscodeRequest = '';
    this.jscodeLang = undefined;
    this.docTemp = '';
    this.slots;
  }(0, _createClass2.default)(stateDoc, [{ key: "isMainComponent", value: function isMainComponent(

    file) {
      return file === this.file;
    } }, { key: "saveComponent", value: function saveComponent(

    source, file) {
      if (this.isMainComponent(file) && this.sourceComponent !== source) {
        var parts = (0, _parser.default)(source, 'name');
        this.slots = (0, _getSlots.default)(parts);
        this.docComponent = [];
        if (parts.script) {
          this.jscodeRequest = (0, _getComponentModuleJSCode.default)(parts, source, file);
          this.jscodeLang = parts.script.lang;
          this.docComponent = this.getDocFile(this.jscodeRequest, file, this.jscodeLang);
        }
      }
    } }, { key: "getDocFile", value: function getDocFile(

    source, file, lang) {
      this.docTemp = (0, _getDocFile2.default)(source, file, lang);
      return this.docTemp;
    } }, { key: "isMixin", value: function isMixin(

    doc) {
      doc = doc || this.docTemp;
      return doc.some(function (docPart) {
        return docPart.kind === 'mixin';
      });
    } }, { key: "getDocJs", value: function getDocJs()

    {
      var docMixins = [].concat.apply([], this.docMixins).filter(function (docPart) {
        return docPart.kind !== 'package';
      });
      return this.docComponent.concat(docMixins);
    } }, { key: "saveMixin", value: function saveMixin(

    doc, file) {
      if (this.isMixin(doc)) {
        doc = doc.
        map(function (docPart) {
          var longnameSplit = docPart.longname.split('.');
          if (longnameSplit[0] === 'default') {
            longnameSplit[0] = 'module.exports';
          }
          docPart.longname = longnameSplit.join('.');
          return docPart;
        }).
        filter(function (docPart) {
          return docPart.longname !== 'module.exports';
        });
        var index;
        this.docMixins.forEach(function (docMixin, id) {
          var packages = docMixin.filter(function (docPart) {
            return docPart.kind === 'package';
          })[0];
          if (packages && packages.files[0] === file) {
            index = id;
          }
        });
        if (!index) {
          this.docMixins.unshift(doc);
        }
      }
    } }, { key: "reset", value: function reset()

    {
      this.file = '';
      this.docComponent = {};
      this.sourceComponent = '';
      this.docMixins = [];
      this.jscodeRequest = '';
      this.jscodeLang = undefined;
      this.docTemp = '';
    } }]);return stateDoc;}();var _default =


new stateDoc();exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9zdGF0ZURvYy5qcyJdLCJuYW1lcyI6WyJzdGF0ZURvYyIsImZpbGUiLCJkb2NDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJkb2NNaXhpbnMiLCJqc2NvZGVSZXF1ZXN0IiwianNjb2RlTGFuZyIsInVuZGVmaW5lZCIsImRvY1RlbXAiLCJzbG90cyIsInNvdXJjZSIsImlzTWFpbkNvbXBvbmVudCIsInBhcnRzIiwic2NyaXB0IiwibGFuZyIsImdldERvY0ZpbGUiLCJkb2MiLCJzb21lIiwiZG9jUGFydCIsImtpbmQiLCJjb25jYXQiLCJhcHBseSIsImZpbHRlciIsImlzTWl4aW4iLCJtYXAiLCJsb25nbmFtZVNwbGl0IiwibG9uZ25hbWUiLCJzcGxpdCIsImpvaW4iLCJpbmRleCIsImZvckVhY2giLCJkb2NNaXhpbiIsImlkIiwicGFja2FnZXMiLCJmaWxlcyIsInVuc2hpZnQiXSwibWFwcGluZ3MiOiJtWEFBQTtBQUNBO0FBQ0E7QUFDQSxtRTs7QUFFTUEsUTtBQUNKLHNCQUFjO0FBQ1osU0FBS0MsSUFBTCxHQUFZLEVBQVo7QUFDQSxTQUFLQyxZQUFMLEdBQW9CLEVBQXBCO0FBQ0EsU0FBS0MsZUFBTCxHQUF1QixFQUF2QjtBQUNBLFNBQUtDLFNBQUwsR0FBaUIsRUFBakI7QUFDQSxTQUFLQyxhQUFMLEdBQXFCLEVBQXJCO0FBQ0EsU0FBS0MsVUFBTCxHQUFrQkMsU0FBbEI7QUFDQSxTQUFLQyxPQUFMLEdBQWUsRUFBZjtBQUNBLFNBQUtDLEtBQUw7QUFDRCxHOztBQUVlUixJQUFBQSxJLEVBQU07QUFDcEIsYUFBT0EsSUFBSSxLQUFLLEtBQUtBLElBQXJCO0FBQ0QsSzs7QUFFYVMsSUFBQUEsTSxFQUFRVCxJLEVBQU07QUFDMUIsVUFBSSxLQUFLVSxlQUFMLENBQXFCVixJQUFyQixLQUE4QixLQUFLRSxlQUFMLEtBQXlCTyxNQUEzRCxFQUFtRTtBQUNqRSxZQUFNRSxLQUFLLEdBQUcscUJBQU9GLE1BQVAsRUFBZSxN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QUwsR0FBWSxFQUFaO0FBQ0EsV0FBS0MsWUFBTCxHQUFvQixFQUFwQjtBQUNBLFdBQUtDLGVBQUwsR0FBdUIsRUFBdkI7QUFDQSxXQUFLQyxTQUFMLEdBQWlCLEVBQWpCO0FBQ0EsV0FBS0MsYUFBTCxHQUFxQixFQUFyQjtBQUNBLFdBQUtDLFVBQUwsR0FBa0JDLFNBQWxCO0FBQ0EsV0FBS0MsT0FBTCxHQUFlLEVBQWY7QUFDRCxLOzs7QUFHWSxJQUFJUixRQUFKLEUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGFyc2VyIGZyb20gJy4vcGFyc2VyJ1xuaW1wb3J0IGdldENvbXBvbmVudE1vZHVsZUpTQ29kZSBmcm9tICcuL2dldENvbXBvbmVudE1vZHVsZUpTQ29kZSdcbmltcG9ydCBnZXRTbG90cyBmcm9tICcuL2dldFNsb3RzJ1xuaW1wb3J0IGdldERvY0ZpbGUgZnJvbSAnLi9nZXREb2NGaWxlJ1xuXG5jbGFzcyBzdGF0ZURvYyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuZmlsZSA9ICcnXG4gICAgdGhpcy5kb2NDb21wb25lbnQgPSB7fVxuICAgIHRoaXMuc291cmNlQ29tcG9uZW50ID0gJydcbiAgICB0aGlzLmRvY01peGlucyA9IFtdXG4gICAgdGhpcy5qc2NvZGVSZXF1ZXN0ID0gJydcbiAgICB0aGlzLmpzY29kZUxhbmcgPSB1bmRlZmluZWRcbiAgICB0aGlzLmRvY1RlbXAgPSAnJ1xuICAgIHRoaXMuc2xvdHNcbiAgfVxuXG4gIGlzTWFpbkNvbXBvbmVudChmaWxlKSB7XG4gICAgcmV0dXJuIGZpbGUgPT09IHRoaXMuZmlsZVxuICB9XG5cbiAgc2F2ZUNvbXBvbmVudChzb3VyY2UsIGZpbGUpIHtcbiAgICBpZiAodGhpcy5pc01haW5Db21wb25lbnQoZmlsZSkgJiYgdGhpcy5zb3VyY2VDb21wb25lbnQgIT09IHNvdXJjZSkge1xuICAgICAgY29uc3QgcGFydHMgPSBwYXJzZXIoc291cmNlLCAnbmFtZScpXG4gICAgICB0aGlzLnNsb3RzID0gZ2V0U2xvdHMocGFydHMpXG4gICAgICB0aGlzLmRvY0NvbXBvbmVudCA9IFtdXG4gICAgICBpZiAocGFydHMuc2NyaXB0KSB7XG4gICAgICAgIHRoaXMuanNjb2RlUmVxdWVzdCA9IGdldENvbXBvbmVudE1vZHVsZUpTQ29kZShwYXJ0cywgc291cmNlLCBmaWxlKVxuICAgICAgICB0aGlzLmpzY29kZUxhbmcgPSBwYXJ0cy5zY3JpcHQubGFuZ1xuICAgICAgICB0aGlzLmRvY0NvbXBvbmVudCA9IHRoaXMuZ2V0RG9jRmlsZSh0aGlzLmpzY29kZVJlcXVlc3QsIGZpbGUsIHRoaXMuanNjb2RlTGFuZylcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXREb2NGaWxlKHNvdXJjZSwgZmlsZSwgbGFuZykge1xuICAgIHRoaXMuZG9jVGVtcCA9IGdldERvY0ZpbGUoc291cmNlLCBmaWxlLCBsYW5nKVxuICAgIHJldHVybiB0aGlzLmRvY1RlbXBcbiAgfVxuXG4gIGlzTWl4aW4oZG9jKSB7XG4gICAgZG9jID0gZG9jIHx8IHRoaXMuZG9jVGVtcFxuICAgIHJldHVybiBkb2Muc29tZShkb2NQYXJ0ID0+IHtcbiAgICAgIHJldHVybiBkb2NQYXJ0LmtpbmQgPT09ICdtaXhpbidcbiAgICB9KVxuICB9XG5cbiAgZ2V0RG9jSnMoKSB7XG4gICAgbGV0IGRvY01peGlucyA9IFtdLmNvbmNhdC5hcHBseShbXSwgdGhpcy5kb2NNaXhpbnMpLmZpbHRlcihmdW5jdGlvbihkb2NQYXJ0KSB7XG4gICAgICByZXR1cm4gZG9jUGFydC5raW5kICE9PSAncGFja2FnZSdcbiAgICB9KVxuICAgIHJldHVybiB0aGlzLmRvY0NvbXBvbmVudC5jb25jYXQoZG9jTWl4aW5zKVxuICB9XG5cbiAgc2F2ZU1peGluKGRvYywgZmlsZSkge1xuICAgIGlmICh0aGlzLmlzTWl4aW4oZG9jKSkge1xuICAgICAgZG9jID0gZG9jXG4gICAgICAgIC5tYXAoZG9jUGFydCA9PiB7XG4gICAgICAgICAgbGV0IGxvbmduYW1lU3BsaXQgPSBkb2NQYXJ0LmxvbmduYW1lLnNwbGl0KCcuJylcbiAgICAgICAgICBpZiAobG9uZ25hbWVTcGxpdFswXSA9PT0gJ2RlZmF1bHQnKSB7XG4gICAgICAgICAgICBsb25nbmFtZVNwbGl0WzBdID0gJ21vZHVsZS5leHBvcnRzJ1xuICAgICAgICAgIH1cbiAgICAgICAgICBkb2NQYXJ0LmxvbmduYW1lID0gbG9uZ25hbWVTcGxpdC5qb2luKCcuJylcbiAgICAgICAgICByZXR1cm4gZG9jUGFydFxuICAgICAgICB9KVxuICAgICAgICAuZmlsdGVyKGRvY1BhcnQgPT4ge1xuICAgICAgICAgIHJldHVybiBkb2NQYXJ0LmxvbmduYW1lICE9PSAnbW9kdWxlLmV4cG9ydHMnXG4gICAgICAgIH0pXG4gICAgICBsZXQgaW5kZXhcbiAgICAgIHRoaXMuZG9jTWl4aW5zLmZvckVhY2goKGRvY01peGluLCBpZCkgPT4ge1xuICAgICAgICBjb25zdCBwYWNrYWdlcyA9IGRvY01peGluLmZpbHRlcihmdW5jdGlvbihkb2NQYXJ0KSB7XG4gICAgICAgICAgcmV0dXJuIGRvY1BhcnQua2luZCA9PT0gJ3BhY2thZ2UnXG4gICAgICAgIH0pWzBdXG4gICAgICAgIGlmIChwYWNrYWdlcyAmJiBwYWNrYWdlcy5maWxlc1swXSA9PT0gZmlsZSkge1xuICAgICAgICAgIGluZGV4ID0gaWRcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIGlmICghaW5kZXgpIHtcbiAgICAgICAgdGhpcy5kb2NNaXhpbnMudW5zaGlmdChkb2MpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5maWxlID0gJydcbiAgICB0aGlzLmRvY0NvbXBvbmVudCA9IHt9XG4gICAgdGhpcy5zb3VyY2VDb21wb25lbnQgPSAnJ1xuICAgIHRoaXMuZG9jTWl4aW5zID0gW11cbiAgICB0aGlzLmpzY29kZVJlcXVlc3QgPSAnJ1xuICAgIHRoaXMuanNjb2RlTGFuZyA9IHVuZGVmaW5lZFxuICAgIHRoaXMuZG9jVGVtcCA9ICcnXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgbmV3IHN0YXRlRG9jKClcbiJdfQ==