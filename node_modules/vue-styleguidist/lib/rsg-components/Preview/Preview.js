function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { transform } from 'buble';
import PlaygroundError from 'rsg-components/PlaygroundError';
import { parse } from 'esprima';
import Vue from 'vue';
import { isSingleFileComponent, transformSingleFileComponent } from '../../utils/singleFileComponentUtils';
import styleScoper from '../../utils/styleScoper';
/* eslint-disable react/no-multi-comp */

var nameVarComponent = '__component__';
/*
 * Reads the code in string and separates the javascript part and the html part
 * @param {string} code
 */

var separateScript = function separateScript(code, style) {
  var index;
  var lines = code.split('\n');

  if (code.indexOf('new Vue') > -1) {
    var indexVueBegin = code.indexOf('new Vue');
    var setVue = "\n\n\n\n\n\t\t// Ignore: Extract the configuration of the example component\n\t\tfunction Vue(params){ ".concat(nameVarComponent, " = params }");
    return {
      js: code.slice(0, indexVueBegin),
      vueComponent: code.slice(indexVueBegin) + setVue,
      style: style
    };
  } else if (isSingleFileComponent(code)) {
    var transformed = transformSingleFileComponent(code);
    return separateScript(transformed.component, transformed.style);
  }

  for (var id = 0; id < lines.length; id++) {
    if (lines[id].trim().charAt(0) === '<') {
      index = id;
      break;
    }
  }

  return {
    js: lines.slice(0, index).join('\n'),
    html: lines.slice(index).join('\n')
  };
};

var getVars = function getVars(syntaxTree) {
  var arr = [];
  arr = syntaxTree.body.filter(function (syntax) {
    return syntax.type === 'VariableDeclaration' || syntax.type === 'FunctionDeclaration';
  });
  arr.unshift([]);
  return arr.reduce(function (total, next) {
    function getId(syntax) {
      if (syntax.declarations) {
        return Array.prototype.concat.apply([], syntax.declarations.map(function (declaration) {
          return declaration.id.name;
        }));
      }

      return [syntax.id.name];
    }

    total = total.concat(getId(next));
    return total;
  });
};

var _compileCode = function compileCode(code, config) {
  return transform(code, config).code;
};
/* eslint-disable no-invalid-this */


var Fragment = React.Fragment ? React.Fragment : 'div';

var Preview =
/*#__PURE__*/
function (_Component) {
  _inherits(Preview, _Component);

  function Preview() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, Preview);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Preview)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "state", {
      error: null
    });

    _defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "handleError", function (err) {
      _this.unmountPreview();

      _this.setState({
        error: err.toString()
      });

      console.error(err); // eslint-disable-line no-console
    });

    return _this;
  }

  _createClass(Preview, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      // Clear console after hot reload, do not clear on the first load
      // to keep any warnings
      if (this.context.codeRevision > 0) {
        // eslint-disable-next-line no-console
        console.clear();
      }

      this.executeCode();
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps, nextState) {
      return this.state.error !== nextState.error || this.props.code !== nextProps.code;
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (this.props.code !== prevProps.code) {
        this.executeCode();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.unmountPreview();
    }
  }, {
    key: "unmountPreview",
    value: function unmountPreview() {
      if (this.mountNode) {
        var el = this.mountNode.children[0];

        if (!el) {
          this.mountNode.innerHTML = ' ';
          this.mountNode.appendChild(document.createElement('div'));
          el = this.mountNode.children[0];
        }

        el = new Vue({
          el: el,
          data: {},
          template: '<div></div> '
        });
      }
    }
  }, {
    key: "executeCode",
    value: function executeCode() {
      this.setState({
        error: null
      });
      var _this$props = this.props,
          code = _this$props.code,
          vuex = _this$props.vuex;
      var renderRootJsx = this.context.renderRootJsx;
      var compuse = {};
      var compiledCode;
      var configComponent;
      var syntaxTree;
      var listVars = [];
      var exampleComponent;

      if (!code) {
        return;
      }

      try {
        compuse = separateScript(code);
        compiledCode = this.compileCode(compuse.js);

        if (compuse.vueComponent) {
          configComponent = this.compileCode(compuse.vueComponent);
        }

        syntaxTree = parse(compuse.js);
        listVars = getVars(syntaxTree);
        exampleComponent = this.evalInContext(compiledCode, listVars, configComponent);
      } catch (err) {
        this.handleError(err);
        compuse.html = '';
      }

      var el = this.mountNode.children[0];

      if (!el) {
        this.mountNode.innerHTML = ' ';
        this.mountNode.appendChild(document.createElement('div'));
        el = this.mountNode.children[0];
      }

      if (exampleComponent) {
        var extendsComponent = {};
        var previewComponent = {};

        if (configComponent) {
          previewComponent = exampleComponent();
          Object.keys(previewComponent).forEach(function (key) {
            if (key === 'el') {
              delete previewComponent.el;
            }
          });
        } else {
          var data = exampleComponent();
          var template = compuse.html;
          previewComponent = {
            data: data,
            template: template
          };
        }

        if (vuex) {
          extendsComponent = {
            store: vuex.default
          };
        }

        var moduleId = 'data-v-' + Math.floor(Math.random() * 1000) + 1;
        previewComponent._scopeId = moduleId;
        var rootComponent = renderRootJsx ? renderRootJsx.default(previewComponent) : {
          render: function render(createElement) {
            return createElement(previewComponent);
          }
        };
        var vueInstance = new Vue(Object.assign(extendsComponent, rootComponent, {
          el: el
        }));

        if (compuse.style) {
          var styleContainer = document.createElement('div');
          styleContainer.innerHTML = compuse.style;
          styleContainer.firstChild.id = moduleId;
          vueInstance.$el.appendChild(styleContainer.firstChild);
        }
      }

      styleScoper();
    }
  }, {
    key: "compileCode",
    value: function compileCode(code) {
      try {
        return _compileCode(code, this.context.config.compilerConfig);
      } catch (err) {
        this.handleError(err);
      }

      return false;
    }
  }, {
    key: "evalInContext",
    value: function evalInContext(compiledCode, listVars, configComponent) {
      var exampleComponentCode = '';

      if (configComponent) {
        exampleComponentCode = "\n\t\t\t\tfunction getConfig() {\n\t\t\t\t\teval(\n\t\t\t\t\t\t".concat(JSON.stringify(compiledCode), "\n\t\t\t\t\t\t + \";\" +\n\t\t\t\t\t\t").concat(JSON.stringify(configComponent), "\n\t\t\t\t\t);\n\t\t\t\t\treturn ").concat(nameVarComponent, ";\n\t\t\t\t}\n\t\t\t\treturn getConfig();\n\t\t\t");
      } else {
        listVars = listVars.map(function (value) {
          return "".concat(value, " : ").concat(value);
        });
        exampleComponentCode = "\n\t\t\t\tfunction getData() {\n\t\t\t\t\teval(".concat(JSON.stringify(compiledCode), ")\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t").concat(listVars.join(','), "\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn getData();\n\t\t\t");
      }

      return this.props.evalInContext(exampleComponentCode);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var error = this.state.error;
      return React.createElement(Fragment, null, React.createElement("div", {
        ref: function ref(_ref) {
          return _this2.mountNode = _ref;
        }
      }, React.createElement("div", null)), error && React.createElement(PlaygroundError, {
        message: error
      }));
    }
  }]);

  return Preview;
}(Component);

_defineProperty(Preview, "propTypes", {
  code: PropTypes.string.isRequired,
  evalInContext: PropTypes.func.isRequired,
  vuex: PropTypes.object
});

_defineProperty(Preview, "contextTypes", {
  config: PropTypes.object.isRequired,
  codeRevision: PropTypes.number.isRequired,
  renderRootJsx: PropTypes.object
});

export { Preview as default };