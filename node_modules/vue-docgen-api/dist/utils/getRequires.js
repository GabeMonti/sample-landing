'use strict';

// Need to supply the regex test as a string for reuse in unit tests
// Currently, trying to change flags throws a TypeError
// Slated for change in ES6, but not possible now:
// https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/RegExp#Description
var REQUIRE_ANYTHING_BASE = 'require\\s*\\(([^)]+)\\)';
var REQUIRE_ANYTHING_REGEX = new RegExp(REQUIRE_ANYTHING_BASE, 'g');

var SIMPLE_STRING_REGEX = /^"([^"]+)"$|^'([^']+)'$/;

/**
                                                      * Returns a list of all strings used in require(...) calls in the given source code.
                                                      * If there is any other expression inside the require call, it throws an error.
                                                      *
                                                      * @param {string} code
                                                      * @returns {Array}
                                                      */
module.exports = function getRequires(code) {
  var requires = {};
  code.replace(REQUIRE_ANYTHING_REGEX, function (requireExprMatch, requiredExpr) {
    var requireStrMatch = SIMPLE_STRING_REGEX.exec(requiredExpr.trim());
    if (!requireStrMatch) {
      throw new Error("Requires using expressions are not supported in examples. (Used: ".concat(
      requireExprMatch, ")"));

    }
    var requiredString = requireStrMatch[1] ? requireStrMatch[1] : requireStrMatch[2];
    requires[requiredString] = requiredString;
  });
  return requires;
};

Object.assign(module.exports, {
  REQUIRE_ANYTHING_BASE: REQUIRE_ANYTHING_BASE,
  REQUIRE_ANYTHING_REGEX: REQUIRE_ANYTHING_REGEX,
  SIMPLE_STRING_REGEX: SIMPLE_STRING_REGEX });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9nZXRSZXF1aXJlcy5qcyJdLCJuYW1lcyI6WyJSRVFVSVJFX0FOWVRISU5HX0JBU0UiLCJSRVFVSVJFX0FOWVRISU5HX1JFR0VYIiwiUmVnRXhwIiwiU0lNUExFX1NUUklOR19SRUdFWCIsIm1vZHVsZSIsImV4cG9ydHMiLCJnZXRSZXF1aXJlcyIsImNvZGUiLCJyZXF1aXJlcyIsInJlcGxhY2UiLCJyZXF1aXJlRXhwck1hdGNoIiwicmVxdWlyZWRFeHByIiwicmVxdWlyZVN0ck1hdGNoIiwiZXhlYyIsInRyaW0iLCJFcnJvciIsInJlcXVpcmVkU3RyaW5nIiwiT2JqZWN0IiwiYXNzaWduIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQU1BLHFCQUFxQixHQUFHLDBCQUE5QjtBQUNBLElBQU1DLHNCQUFzQixHQUFHLElBQUlDLE1BQUosQ0FBV0YscUJBQVgsRUFBa0MsR0FBbEMsQ0FBL0I7O0FBRUEsSUFBTUcsbUJBQW1CLEdBQUcseUJBQTVCOztBQUVBOzs7Ozs7O0FBT0FDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixTQUFTQyxXQUFULENBQXFCQyxJQUFyQixFQUEyQjtBQUMxQyxNQUFNQyxRQUFRLEdBQUcsRUFBakI7QUFDQUQsRUFBQUEsSUFBSSxDQUFDRSxPQUFMLENBQWFSLHNCQUFiLEVBQXFDLFVBQVNTLGdCQUFULEVBQTJCQyxZQUEzQixFQUF5QztBQUM1RSxRQUFNQyxlQUFlLEdBQUdULG1CQUFtQixDQUFDVSxJQUFwQixDQUF5QkYsWUFBWSxDQUFDRyxJQUFiLEVBQXpCLENBQXhCO0FBQ0EsUUFBSSxDQUFDRixlQUFMLEVBQXNCO0FBQ3BCLFlBQU0sSUFBSUcsS0FBSjtBQUNnRUwsTUFBQUEsZ0JBRGhFLE9BQU47O0FBR0Q7QUFDRCxRQUFNTSxjQUFjLEdBQUdKLGVBQWUsQ0FBQyxDQUFELENBQWYsR0FBcUJBLGVBQWUsQ0FBQyxDQUFELENBQXBDLEdBQTBDQSxlQUFlLENBQUMsQ0FBRCxDQUFoRjtBQUNBSixJQUFBQSxRQUFRLENBQUNRLGNBQUQsQ0FBUixHQUEyQkEsY0FBM0I7QUFDRCxHQVREO0FBVUEsU0FBT1IsUUFBUDtBQUNELENBYkQ7O0FBZUFTLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjZCxNQUFNLENBQUNDLE9BQXJCLEVBQThCO0FBQzVCTCxFQUFBQSxxQkFBcUIsRUFBckJBLHFCQUQ0QjtBQUU1QkMsRUFBQUEsc0JBQXNCLEVBQXRCQSxzQkFGNEI7QUFHNUJFLEVBQUFBLG1CQUFtQixFQUFuQkEsbUJBSDRCLEVBQTlCIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbi8vIE5lZWQgdG8gc3VwcGx5IHRoZSByZWdleCB0ZXN0IGFzIGEgc3RyaW5nIGZvciByZXVzZSBpbiB1bml0IHRlc3RzXG4vLyBDdXJyZW50bHksIHRyeWluZyB0byBjaGFuZ2UgZmxhZ3MgdGhyb3dzIGEgVHlwZUVycm9yXG4vLyBTbGF0ZWQgZm9yIGNoYW5nZSBpbiBFUzYsIGJ1dCBub3QgcG9zc2libGUgbm93OlxuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUmVnRXhwI0Rlc2NyaXB0aW9uXG5jb25zdCBSRVFVSVJFX0FOWVRISU5HX0JBU0UgPSAncmVxdWlyZVxcXFxzKlxcXFwoKFteKV0rKVxcXFwpJ1xuY29uc3QgUkVRVUlSRV9BTllUSElOR19SRUdFWCA9IG5ldyBSZWdFeHAoUkVRVUlSRV9BTllUSElOR19CQVNFLCAnZycpXG5cbmNvbnN0IFNJTVBMRV9TVFJJTkdfUkVHRVggPSAvXlwiKFteXCJdKylcIiR8XicoW14nXSspJyQvXG5cbi8qKlxuICogUmV0dXJucyBhIGxpc3Qgb2YgYWxsIHN0cmluZ3MgdXNlZCBpbiByZXF1aXJlKC4uLikgY2FsbHMgaW4gdGhlIGdpdmVuIHNvdXJjZSBjb2RlLlxuICogSWYgdGhlcmUgaXMgYW55IG90aGVyIGV4cHJlc3Npb24gaW5zaWRlIHRoZSByZXF1aXJlIGNhbGwsIGl0IHRocm93cyBhbiBlcnJvci5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29kZVxuICogQHJldHVybnMge0FycmF5fVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdldFJlcXVpcmVzKGNvZGUpIHtcbiAgY29uc3QgcmVxdWlyZXMgPSB7fVxuICBjb2RlLnJlcGxhY2UoUkVRVUlSRV9BTllUSElOR19SRUdFWCwgZnVuY3Rpb24ocmVxdWlyZUV4cHJNYXRjaCwgcmVxdWlyZWRFeHByKSB7XG4gICAgY29uc3QgcmVxdWlyZVN0ck1hdGNoID0gU0lNUExFX1NUUklOR19SRUdFWC5leGVjKHJlcXVpcmVkRXhwci50cmltKCkpXG4gICAgaWYgKCFyZXF1aXJlU3RyTWF0Y2gpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYFJlcXVpcmVzIHVzaW5nIGV4cHJlc3Npb25zIGFyZSBub3Qgc3VwcG9ydGVkIGluIGV4YW1wbGVzLiAoVXNlZDogJHtyZXF1aXJlRXhwck1hdGNofSlgXG4gICAgICApXG4gICAgfVxuICAgIGNvbnN0IHJlcXVpcmVkU3RyaW5nID0gcmVxdWlyZVN0ck1hdGNoWzFdID8gcmVxdWlyZVN0ck1hdGNoWzFdIDogcmVxdWlyZVN0ck1hdGNoWzJdXG4gICAgcmVxdWlyZXNbcmVxdWlyZWRTdHJpbmddID0gcmVxdWlyZWRTdHJpbmdcbiAgfSlcbiAgcmV0dXJuIHJlcXVpcmVzXG59XG5cbk9iamVjdC5hc3NpZ24obW9kdWxlLmV4cG9ydHMsIHtcbiAgUkVRVUlSRV9BTllUSElOR19CQVNFLFxuICBSRVFVSVJFX0FOWVRISU5HX1JFR0VYLFxuICBTSU1QTEVfU1RSSU5HX1JFR0VYLFxufSlcbiJdfQ==