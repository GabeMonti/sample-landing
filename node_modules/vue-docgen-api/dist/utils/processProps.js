"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = processProps;var _getProp = _interopRequireDefault(require("./getProp"));

function processProps(docFile, component) {
  docFile = docFile.slice();
  var props = component.props;
  var mixins = component.mixins;
  var propsMixins = {};
  if (mixins) {
    mixins.forEach(function (mixin) {
      var pMixin = mixin.props;
      if (pMixin) {
        if (Array.isArray(pMixin)) {
          var propsMerge = {};
          pMixin.forEach(function (key) {
            propsMerge[key] = {};
          });
          propsMixins = Object.assign({}, propsMerge, propsMixins);
        } else {
          propsMixins = Object.assign({}, pMixin, propsMixins);
        }
      }
    });
  }

  var hasPropsInMixin = propsMixins && Object.keys(propsMixins).length;
  var hasPropsInComponent = props && Object.keys(props).length;
  if (hasPropsInMixin || hasPropsInComponent) {
    var listDocProps = {};
    if (Array.isArray(props)) {
      var newProps = {};
      props.forEach(function (propName) {
        newProps[propName] = {};
      });
      props = newProps;
    }
    props = Object.assign({}, propsMixins, props);
    var listDocParts = [];
    Object.keys(props).forEach(function (key) {
      var propName = key;
      var docPart = docFile.filter(function (comment) {
        var propNameDoc = comment.longname.split('props.')[1];
        return propNameDoc === propName && listDocParts.indexOf(propNameDoc) === -1;
      })[0];
      if (docPart) {
        listDocParts.push(docPart.longname);
      }
      var prop = props[propName];
      var docProp = (0, _getProp.default)(prop, docPart);
      if (docProp.tags.model) {
        propName = 'v-model';
      }
      listDocProps[propName] = docProp;
    });
    return listDocProps;
  }
  return;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9wcm9jZXNzUHJvcHMuanMiXSwibmFtZXMiOlsicHJvY2Vzc1Byb3BzIiwiZG9jRmlsZSIsImNvbXBvbmVudCIsInNsaWNlIiwicHJvcHMiLCJtaXhpbnMiLCJwcm9wc01peGlucyIsImZvckVhY2giLCJtaXhpbiIsInBNaXhpbiIsIkFycmF5IiwiaXNBcnJheSIsInByb3BzTWVyZ2UiLCJrZXkiLCJPYmplY3QiLCJhc3NpZ24iLCJoYXNQcm9wc0luTWl4aW4iLCJrZXlzIiwibGVuZ3RoIiwiaGFzUHJvcHNJbkNvbXBvbmVudCIsImxpc3REb2NQcm9wcyIsIm5ld1Byb3BzIiwicHJvcE5hbWUiLCJsaXN0RG9jUGFydHMiLCJkb2NQYXJ0IiwiZmlsdGVyIiwiY29tbWVudCIsInByb3BOYW1lRG9jIiwibG9uZ25hbWUiLCJzcGxpdCIsImluZGV4T2YiLCJwdXNoIiwicHJvcCIsImRvY1Byb3AiLCJ0YWdzIiwibW9kZWwiXSwibWFwcGluZ3MiOiIrTEFBQTs7QUFFZSxTQUFTQSxZQUFULENBQXNCQyxPQUF0QixFQUErQkMsU0FBL0IsRUFBMEM7QUFDdkRELEVBQUFBLE9BQU8sR0FBR0EsT0FBTyxDQUFDRSxLQUFSLEVBQVY7QUFDQSxNQUFJQyxLQUFLLEdBQUdGLFNBQVMsQ0FBQ0UsS0FBdEI7QUFDQSxNQUFJQyxNQUFNLEdBQUdILFNBQVMsQ0FBQ0csTUFBdkI7QUFDQSxNQUFJQyxXQUFXLEdBQUcsRUFBbEI7QUFDQSxNQUFJRCxNQUFKLEVBQVk7QUFDVkEsSUFBQUEsTUFBTSxDQUFDRSxPQUFQLENBQWUsVUFBQUMsS0FBSyxFQUFJO0FBQ3RCLFVBQU1DLE1BQU0sR0FBR0QsS0FBSyxDQUFDSixLQUFyQjtBQUNBLFVBQUlLLE1BQUosRUFBWTtBQUNWLFlBQUlDLEtBQUssQ0FBQ0MsT0FBTixDQUFjRixNQUFkLENBQUosRUFBMkI7QUFDekIsY0FBTUcsVUFBVSxHQUFHLEVBQW5CO0FBQ0FILFVBQUFBLE1BQU0sQ0FBQ0YsT0FBUCxDQUFlLFVBQUFNLEdBQUcsRUFBSTtBQUNwQkQsWUFBQUEsVUFBVSxDQUFDQyxHQUFELENBQVYsR0FBa0IsRUFBbEI7QUFDRCxXQUZEO0FBR0FQLFVBQUFBLFdBQVcsR0FBR1EsTUFBTSxDQUFDQyxNQUFQLENBQWMsRUFBZCxFQUFrQkgsVUFBbEIsRUFBOEJOLFdBQTlCLENBQWQ7QUFDRCxTQU5ELE1BTU87QUFDTEEsVUFBQUEsV0FBVyxHQUFHUSxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCTixNQUFsQixFQUEwQkgsV0FBMUIsQ0FBZDtBQUNEO0FBQ0Y7QUFDRixLQWJEO0FBY0Q7O0FBRUQsTUFBTVUsZUFBZSxHQUFHVixXQUFXLElBQUlRLE1BQU0sQ0FBQ0csSUFBUCxDQUFZWCxXQUFaLEVBQXlCWSxNQUFoRTtBQUNBLE1BQU1DLG1CQUFtQixHQUFHZixLQUFLLElBQUlVLE1BQU0sQ0FBQ0csSUFBUCxDQUFZYixLQUFaLEVBQW1CYyxNQUF4RDtBQUNBLE1BQUlGLGVBQWUsSUFBSUcsbUJBQXZCLEVBQTRDO0FBQzFDLFFBQU1DLFlBQVksR0FBRyxFQUFyQjtBQUNBLFFBQUlWLEtBQUssQ0FBQ0MsT0FBTixDQUFjUCxLQUFkLENBQUosRUFBMEI7QUFDeEIsVUFBTWlCLFFBQVEsR0FBRyxFQUFqQjtBQUNBakIsTUFBQUEsS0FBSyxDQUFDRyxPQUFOLENBQWMsVUFBQWUsUUFBUSxFQUFJO0FBQ3hCRCxRQUFBQSxRQUFRLENBQUNDLFFBQUQsQ0FBUixHQUFxQixFQUFyQjtBQUNELE9BRkQ7QUFHQWxCLE1BQUFBLEtBQUssR0FBR2lCLFFBQVI7QUFDRDtBQUNEakIsSUFBQUEsS0FBSyxHQUFHVSxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCVCxXQUFsQixFQUErQkYsS0FBL0IsQ0FBUjtBQUNBLFFBQU1tQixZQUFZLEdBQUcsRUFBckI7QUFDQVQsSUFBQUEsTUFBTSxDQUFDRyxJQUFQLENBQVliLEtBQVosRUFBbUJHLE9BQW5CLENBQTJCLFVBQUFNLEdBQUcsRUFBSTtBQUNoQyxVQUFJUyxRQUFRLEdBQUdULEdBQWY7QUFDQSxVQUFNVyxPQUFPLEdBQUd2QixPQUFPLENBQUN3QixNQUFSLENBQWUsVUFBQUMsT0FBTyxFQUFJO0FBQ3hDLFlBQU1DLFdBQVcsR0FBR0QsT0FBTyxDQUFDRSxRQUFSLENBQWlCQyxLQUFqQixDQUF1QixRQUF2QixFQUFpQyxDQUFqQyxDQUFwQjtBQUNBLGVBQU9GLFdBQVcsS0FBS0wsUUFBaEIsSUFBNEJDLFlBQVksQ0FBQ08sT0FBYixDQUFxQkgsV0FBckIsTUFBc0MsQ0FBQyxDQUExRTtBQUNELE9BSGUsRUFHYixDQUhhLENBQWhCO0FBSUEsVUFBSUgsT0FBSixFQUFhO0FBQ1hELFFBQUFBLFlBQVksQ0FBQ1EsSUFBYixDQUFrQlAsT0FBTyxDQUFDSSxRQUExQjtBQUNEO0FBQ0QsVUFBTUksSUFBSSxHQUFHNUIsS0FBSyxDQUFDa0IsUUFBRCxDQUFsQjtBQUNBLFVBQU1XLE9BQU8sR0FBRyxzQkFBUUQsSUFBUixFQUFjUixPQUFkLENBQWhCO0FBQ0EsVUFBSVMsT0FBTyxDQUFDQyxJQUFSLENBQWFDLEtBQWpCLEVBQXdCO0FBQ3RCYixRQUFBQSxRQUFRLEdBQUcsU0FBWDtBQUNEO0FBQ0RGLE1BQUFBLFlBQVksQ0FBQ0UsUUFBRCxDQUFaLEdBQXlCVyxPQUF6QjtBQUNELEtBZkQ7QUFnQkEsV0FBT2IsWUFBUDtBQUNEO0FBQ0Q7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBnZXRQcm9wIGZyb20gJy4vZ2V0UHJvcCdcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcHJvY2Vzc1Byb3BzKGRvY0ZpbGUsIGNvbXBvbmVudCkge1xuICBkb2NGaWxlID0gZG9jRmlsZS5zbGljZSgpXG4gIGxldCBwcm9wcyA9IGNvbXBvbmVudC5wcm9wc1xuICBsZXQgbWl4aW5zID0gY29tcG9uZW50Lm1peGluc1xuICBsZXQgcHJvcHNNaXhpbnMgPSB7fVxuICBpZiAobWl4aW5zKSB7XG4gICAgbWl4aW5zLmZvckVhY2gobWl4aW4gPT4ge1xuICAgICAgY29uc3QgcE1peGluID0gbWl4aW4ucHJvcHNcbiAgICAgIGlmIChwTWl4aW4pIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocE1peGluKSkge1xuICAgICAgICAgIGNvbnN0IHByb3BzTWVyZ2UgPSB7fVxuICAgICAgICAgIHBNaXhpbi5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICBwcm9wc01lcmdlW2tleV0gPSB7fVxuICAgICAgICAgIH0pXG4gICAgICAgICAgcHJvcHNNaXhpbnMgPSBPYmplY3QuYXNzaWduKHt9LCBwcm9wc01lcmdlLCBwcm9wc01peGlucylcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9wc01peGlucyA9IE9iamVjdC5hc3NpZ24oe30sIHBNaXhpbiwgcHJvcHNNaXhpbnMpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgY29uc3QgaGFzUHJvcHNJbk1peGluID0gcHJvcHNNaXhpbnMgJiYgT2JqZWN0LmtleXMocHJvcHNNaXhpbnMpLmxlbmd0aFxuICBjb25zdCBoYXNQcm9wc0luQ29tcG9uZW50ID0gcHJvcHMgJiYgT2JqZWN0LmtleXMocHJvcHMpLmxlbmd0aFxuICBpZiAoaGFzUHJvcHNJbk1peGluIHx8IGhhc1Byb3BzSW5Db21wb25lbnQpIHtcbiAgICBjb25zdCBsaXN0RG9jUHJvcHMgPSB7fVxuICAgIGlmIChBcnJheS5pc0FycmF5KHByb3BzKSkge1xuICAgICAgY29uc3QgbmV3UHJvcHMgPSB7fVxuICAgICAgcHJvcHMuZm9yRWFjaChwcm9wTmFtZSA9PiB7XG4gICAgICAgIG5ld1Byb3BzW3Byb3BOYW1lXSA9IHt9XG4gICAgICB9KVxuICAgICAgcHJvcHMgPSBuZXdQcm9wc1xuICAgIH1cbiAgICBwcm9wcyA9IE9iamVjdC5hc3NpZ24oe30sIHByb3BzTWl4aW5zLCBwcm9wcylcbiAgICBjb25zdCBsaXN0RG9jUGFydHMgPSBbXVxuICAgIE9iamVjdC5rZXlzKHByb3BzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBsZXQgcHJvcE5hbWUgPSBrZXlcbiAgICAgIGNvbnN0IGRvY1BhcnQgPSBkb2NGaWxlLmZpbHRlcihjb21tZW50ID0+IHtcbiAgICAgICAgY29uc3QgcHJvcE5hbWVEb2MgPSBjb21tZW50LmxvbmduYW1lLnNwbGl0KCdwcm9wcy4nKVsxXVxuICAgICAgICByZXR1cm4gcHJvcE5hbWVEb2MgPT09IHByb3BOYW1lICYmIGxpc3REb2NQYXJ0cy5pbmRleE9mKHByb3BOYW1lRG9jKSA9PT0gLTFcbiAgICAgIH0pWzBdXG4gICAgICBpZiAoZG9jUGFydCkge1xuICAgICAgICBsaXN0RG9jUGFydHMucHVzaChkb2NQYXJ0LmxvbmduYW1lKVxuICAgICAgfVxuICAgICAgY29uc3QgcHJvcCA9IHByb3BzW3Byb3BOYW1lXVxuICAgICAgY29uc3QgZG9jUHJvcCA9IGdldFByb3AocHJvcCwgZG9jUGFydClcbiAgICAgIGlmIChkb2NQcm9wLnRhZ3MubW9kZWwpIHtcbiAgICAgICAgcHJvcE5hbWUgPSAndi1tb2RlbCdcbiAgICAgIH1cbiAgICAgIGxpc3REb2NQcm9wc1twcm9wTmFtZV0gPSBkb2NQcm9wXG4gICAgfSlcbiAgICByZXR1cm4gbGlzdERvY1Byb3BzXG4gIH1cbiAgcmV0dXJuXG59XG4iXX0=