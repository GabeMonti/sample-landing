"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _fs = _interopRequireDefault(require("fs"));
var _path = _interopRequireDefault(require("path"));
var _parser = _interopRequireDefault(require("./parser"));
var _getComponentModuleJSCode = _interopRequireDefault(require("./getComponentModuleJSCode"));
var _stateDoc = _interopRequireDefault(require("./stateDoc"));
var _parseModule = _interopRequireDefault(require("./parseModule"));
var _evalComponentCode = _interopRequireDefault(require("./evalComponentCode"));

module.exports = function getExtends(listRequire) {
  var output = [];
  listRequire.forEach(function (filePath) {
    var isComponent = _path.default.extname(filePath) === '.vue';
    if (isComponent && _fs.default.existsSync(filePath)) {
      var source = _fs.default.readFileSync(filePath, {
        encoding: 'utf-8' });

      var parts = (0, _parser.default)(source, 'name');
      var jscodeLang = parts.script.lang;
      var jscode = (0, _getComponentModuleJSCode.default)(parts, source, filePath);
      var doc = _stateDoc.default.getDocFile(jscode, filePath, jscodeLang);
      _stateDoc.default.saveMixin(doc, filePath);
      if (_stateDoc.default.isMixin()) {
        var parsedSource = (0, _parseModule.default)(jscode, filePath, _stateDoc.default.jscodeLang);
        var mixin = (0, _evalComponentCode.default)(parsedSource);
        if (Object.keys(mixin.exports).length === 0) {
          mixin.exports.default = mixin.module.exports;
        }
        if (mixin.exports.default) {
          var component = mixin.exports.default;
          delete component.title;
          output.push(component);
        }
      }
    }
  });
  return output;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9nZXRFeHRlbmRzLmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJnZXRFeHRlbmRzIiwibGlzdFJlcXVpcmUiLCJvdXRwdXQiLCJmb3JFYWNoIiwiZmlsZVBhdGgiLCJpc0NvbXBvbmVudCIsInBhdGgiLCJleHRuYW1lIiwiZnMiLCJleGlzdHNTeW5jIiwic291cmNlIiwicmVhZEZpbGVTeW5jIiwiZW5jb2RpbmciLCJwYXJ0cyIsImpzY29kZUxhbmciLCJzY3JpcHQiLCJsYW5nIiwianNjb2RlIiwiZG9jIiwic3RhdGVEb2MiLCJnZXREb2NGaWxlIiwic2F2ZU1peGluIiwiaXNNaXhpbiIsInBhcnNlZFNvdXJjZSIsIm1peGluIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsImRlZmF1bHQiLCJjb21wb25lbnQiLCJ0aXRsZSIsInB1c2giXSwibWFwcGluZ3MiOiJrR0FBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFNBQVNDLFVBQVQsQ0FBb0JDLFdBQXBCLEVBQWlDO0FBQ2hELE1BQU1DLE1BQU0sR0FBRyxFQUFmO0FBQ0FELEVBQUFBLFdBQVcsQ0FBQ0UsT0FBWixDQUFvQixVQUFBQyxRQUFRLEVBQUk7QUFDOUIsUUFBTUMsV0FBVyxHQUFHQyxjQUFLQyxPQUFMLENBQWFILFFBQWIsTUFBMkIsTUFBL0M7QUFDQSxRQUFJQyxXQUFXLElBQUlHLFlBQUdDLFVBQUgsQ0FBY0wsUUFBZCxDQUFuQixFQUE0QztBQUMxQyxVQUFNTSxNQUFNLEdBQUdGLFlBQUdHLFlBQUgsQ0FBZ0JQLFFBQWhCLEVBQTBCO0FBQ3ZDUSxRQUFBQSxRQUFRLEVBQUUsT0FENkIsRUFBMUIsQ0FBZjs7QUFHQSxVQUFNQyxLQUFLLEdBQUcscUJBQU9ILE1BQVAsRUFBZSxNQUFmLENBQWQ7QUFDQSxVQUFNSSxVQUFVLEdBQUdELEtBQUssQ0FBQ0UsTUFBTixDQUFhQyxJQUFoQztBQUNBLFVBQU1DLE1BQU0sR0FBRyx1Q0FBeUJKLEtBQXpCLEVBQWdDSCxNQUFoQyxFQUF3Q04sUUFBeEMsQ0FBZjtBQUNBLFVBQU1jLEdBQUcsR0FBR0Msa0JBQVNDLFVBQVQsQ0FBb0JILE1BQXBCLEVBQTRCYixRQUE1QixFQUFzQ1UsVUFBdEMsQ0FBWjtBQUNBSyx3QkFBU0UsU0FBVCxDQUFtQkgsR0FBbkIsRUFBd0JkLFFBQXhCO0FBQ0EsVUFBSWUsa0JBQVNHLE9BQVQsRUFBSixFQUF3QjtBQUN0QixZQUFNQyxZQUFZLEdBQUcsMEJBQVlOLE1BQVosRUFBb0JiLFFBQXBCLEVBQThCZSxrQkFBU0wsVUFBdkMsQ0FBckI7QUFDQSxZQUFNVSxLQUFLLEdBQUcsZ0NBQWtCRCxZQUFsQixDQUFkO0FBQ0EsWUFBSUUsTUFBTSxDQUFDQyxJQUFQLENBQVlGLEtBQUssQ0FBQ3pCLE9BQWxCLEVBQTJCNEIsTUFBM0IsS0FBc0MsQ0FBMUMsRUFBNkM7QUFDM0NILFVBQUFBLEtBQUssQ0FBQ3pCLE9BQU4sQ0FBYzZCLE9BQWQsR0FBd0JKLEtBQUssQ0FBQzFCLE1BQU4sQ0FBYUMsT0FBckM7QUFDRDtBQUNELFlBQUl5QixLQUFLLENBQUN6QixPQUFOLENBQWM2QixPQUFsQixFQUEyQjtBQUN6QixjQUFNQyxTQUFTLEdBQUdMLEtBQUssQ0FBQ3pCLE9BQU4sQ0FBYzZCLE9BQWhDO0FBQ0EsaUJBQU9DLFNBQVMsQ0FBQ0MsS0FBakI7QUFDQTVCLFVBQUFBLE1BQU0sQ0FBQzZCLElBQVAsQ0FBWUYsU0FBWjtBQUNEO0FBQ0Y7QUFDRjtBQUNGLEdBeEJEO0FBeUJBLFNBQU8zQixNQUFQO0FBQ0QsQ0E1QkQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnMgZnJvbSAnZnMnXG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJ1xuaW1wb3J0IHBhcnNlciBmcm9tICcuL3BhcnNlcidcbmltcG9ydCBnZXRDb21wb25lbnRNb2R1bGVKU0NvZGUgZnJvbSAnLi9nZXRDb21wb25lbnRNb2R1bGVKU0NvZGUnXG5pbXBvcnQgc3RhdGVEb2MgZnJvbSAnLi9zdGF0ZURvYydcbmltcG9ydCBwYXJzZU1vZHVsZSBmcm9tICcuL3BhcnNlTW9kdWxlJ1xuaW1wb3J0IGV2YWxDb21wb25lbnRDb2RlIGZyb20gJy4vZXZhbENvbXBvbmVudENvZGUnXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0RXh0ZW5kcyhsaXN0UmVxdWlyZSkge1xuICBjb25zdCBvdXRwdXQgPSBbXVxuICBsaXN0UmVxdWlyZS5mb3JFYWNoKGZpbGVQYXRoID0+IHtcbiAgICBjb25zdCBpc0NvbXBvbmVudCA9IHBhdGguZXh0bmFtZShmaWxlUGF0aCkgPT09ICcudnVlJ1xuICAgIGlmIChpc0NvbXBvbmVudCAmJiBmcy5leGlzdHNTeW5jKGZpbGVQYXRoKSkge1xuICAgICAgY29uc3Qgc291cmNlID0gZnMucmVhZEZpbGVTeW5jKGZpbGVQYXRoLCB7XG4gICAgICAgIGVuY29kaW5nOiAndXRmLTgnLFxuICAgICAgfSlcbiAgICAgIGNvbnN0IHBhcnRzID0gcGFyc2VyKHNvdXJjZSwgJ25hbWUnKVxuICAgICAgY29uc3QganNjb2RlTGFuZyA9IHBhcnRzLnNjcmlwdC5sYW5nXG4gICAgICBjb25zdCBqc2NvZGUgPSBnZXRDb21wb25lbnRNb2R1bGVKU0NvZGUocGFydHMsIHNvdXJjZSwgZmlsZVBhdGgpXG4gICAgICBjb25zdCBkb2MgPSBzdGF0ZURvYy5nZXREb2NGaWxlKGpzY29kZSwgZmlsZVBhdGgsIGpzY29kZUxhbmcpXG4gICAgICBzdGF0ZURvYy5zYXZlTWl4aW4oZG9jLCBmaWxlUGF0aClcbiAgICAgIGlmIChzdGF0ZURvYy5pc01peGluKCkpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkU291cmNlID0gcGFyc2VNb2R1bGUoanNjb2RlLCBmaWxlUGF0aCwgc3RhdGVEb2MuanNjb2RlTGFuZylcbiAgICAgICAgY29uc3QgbWl4aW4gPSBldmFsQ29tcG9uZW50Q29kZShwYXJzZWRTb3VyY2UpXG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhtaXhpbi5leHBvcnRzKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBtaXhpbi5leHBvcnRzLmRlZmF1bHQgPSBtaXhpbi5tb2R1bGUuZXhwb3J0c1xuICAgICAgICB9XG4gICAgICAgIGlmIChtaXhpbi5leHBvcnRzLmRlZmF1bHQpIHtcbiAgICAgICAgICBjb25zdCBjb21wb25lbnQgPSBtaXhpbi5leHBvcnRzLmRlZmF1bHRcbiAgICAgICAgICBkZWxldGUgY29tcG9uZW50LnRpdGxlXG4gICAgICAgICAgb3V0cHV0LnB1c2goY29tcG9uZW50KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KVxuICByZXR1cm4gb3V0cHV0XG59XG4iXX0=