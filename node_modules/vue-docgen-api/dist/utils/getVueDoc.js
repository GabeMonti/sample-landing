"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = getVueDoc;var _path = _interopRequireDefault(require("path"));
var _variables = require("./variables");
var _processTags = _interopRequireDefault(require("./processTags"));
var _processProps = _interopRequireDefault(require("./processProps"));
var _processMethods = _interopRequireDefault(require("./processMethods"));
var _processEvents = _interopRequireDefault(require("./processEvents"));

function getVueDoc(stateDoc, component) {
  var docJsFile = stateDoc.getDocJs();
  var docComponent;

  var displayName =
  !component.name || component.name === '' // if component does not have a name, use the name of the file containing it
  ? _path.default.basename(stateDoc.file, _path.default.extname(stateDoc.file)) :
  component.name;

  if (docJsFile) {
    docJsFile = docJsFile.filter(function (comment) {
      return comment.kind !== 'package';
    });
    docComponent = docJsFile.filter(function (comment) {
      return comment.longname === 'module.exports' || comment.longname.match(/(_)?default(\d+)?$/g);
    })[0];
  } else {
    docJsFile = [];
    docComponent = false;
  }

  var description = _variables.EMPTY;
  var comment = _variables.EMPTY;
  var tags = {};
  if (docComponent) {
    description = (0, _variables.getDescription)(docComponent);
    comment = (0, _variables.getComment)(docComponent);
    tags = (0, _processTags.default)(docComponent, _variables.IGNORE_DEFAULT);
  }
  var props = (0, _processProps.default)(docJsFile, component);
  var methods = (0, _processMethods.default)(docJsFile, component);
  var events = (0, _processEvents.default)(docJsFile, component);

  return {
    description: description,
    methods: methods,
    displayName: displayName,
    props: props,
    comment: comment,
    tags: tags,
    events: events,
    slots: stateDoc.slots };

}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9nZXRWdWVEb2MuanMiXSwibmFtZXMiOlsiZ2V0VnVlRG9jIiwic3RhdGVEb2MiLCJjb21wb25lbnQiLCJkb2NKc0ZpbGUiLCJnZXREb2NKcyIsImRvY0NvbXBvbmVudCIsImRpc3BsYXlOYW1lIiwibmFtZSIsInBhdGgiLCJiYXNlbmFtZSIsImZpbGUiLCJleHRuYW1lIiwiZmlsdGVyIiwiY29tbWVudCIsImtpbmQiLCJsb25nbmFtZSIsIm1hdGNoIiwiZGVzY3JpcHRpb24iLCJFTVBUWSIsInRhZ3MiLCJJR05PUkVfREVGQVVMVCIsInByb3BzIiwibWV0aG9kcyIsImV2ZW50cyIsInNsb3RzIl0sIm1hcHBpbmdzIjoiNExBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVlLFNBQVNBLFNBQVQsQ0FBbUJDLFFBQW5CLEVBQTZCQyxTQUE3QixFQUF3QztBQUNyRCxNQUFJQyxTQUFTLEdBQUdGLFFBQVEsQ0FBQ0csUUFBVCxFQUFoQjtBQUNBLE1BQUlDLFlBQUo7O0FBRUEsTUFBTUMsV0FBVztBQUNmLEdBQUNKLFNBQVMsQ0FBQ0ssSUFBWCxJQUFtQkwsU0FBUyxDQUFDSyxJQUFWLEtBQW1CLEVBQXRDLENBQXlDO0FBQXpDLElBQ0lDLGNBQUtDLFFBQUwsQ0FBY1IsUUFBUSxDQUFDUyxJQUF2QixFQUE2QkYsY0FBS0csT0FBTCxDQUFhVixRQUFRLENBQUNTLElBQXRCLENBQTdCLENBREo7QUFFSVIsRUFBQUEsU0FBUyxDQUFDSyxJQUhoQjs7QUFLQSxNQUFJSixTQUFKLEVBQWU7QUFDYkEsSUFBQUEsU0FBUyxHQUFHQSxTQUFTLENBQUNTLE1BQVYsQ0FBaUIsVUFBQUMsT0FBTyxFQUFJO0FBQ3RDLGFBQU9BLE9BQU8sQ0FBQ0MsSUFBUixLQUFpQixTQUF4QjtBQUNELEtBRlcsQ0FBWjtBQUdBVCxJQUFBQSxZQUFZLEdBQUdGLFNBQVMsQ0FBQ1MsTUFBVixDQUFpQixVQUFBQyxPQUFPLEVBQUk7QUFDekMsYUFBT0EsT0FBTyxDQUFDRSxRQUFSLEtBQXFCLGdCQUFyQixJQUF5Q0YsT0FBTyxDQUFDRSxRQUFSLENBQWlCQyxLQUFqQixDQUF1QixxQkFBdkIsQ0FBaEQ7QUFDRCxLQUZjLEVBRVosQ0FGWSxDQUFmO0FBR0QsR0FQRCxNQU9PO0FBQ0xiLElBQUFBLFNBQVMsR0FBRyxFQUFaO0FBQ0FFLElBQUFBLFlBQVksR0FBRyxLQUFmO0FBQ0Q7O0FBRUQsTUFBSVksV0FBVyxHQUFHQyxnQkFBbEI7QUFDQSxNQUFJTCxPQUFPLEdBQUdLLGdCQUFkO0FBQ0EsTUFBSUMsSUFBSSxHQUFHLEVBQVg7QUFDQSxNQUFJZCxZQUFKLEVBQWtCO0FBQ2hCWSxJQUFBQSxXQUFXLEdBQUcsK0JBQWVaLFlBQWYsQ0FBZDtBQUNBUSxJQUFBQSxPQUFPLEdBQUcsMkJBQVdSLFlBQVgsQ0FBVjtBQUNBYyxJQUFBQSxJQUFJLEdBQUcsMEJBQVlkLFlBQVosRUFBMEJlLHlCQUExQixDQUFQO0FBQ0Q7QUFDRCxNQUFNQyxLQUFLLEdBQUcsMkJBQWFsQixTQUFiLEVBQXdCRCxTQUF4QixDQUFkO0FBQ0EsTUFBTW9CLE9BQU8sR0FBRyw2QkFBZW5CLFNBQWYsRUFBMEJELFNBQTFCLENBQWhCO0FBQ0EsTUFBTXFCLE1BQU0sR0FBRyw0QkFBY3BCLFNBQWQsRUFBeUJELFNBQXpCLENBQWY7O0FBRUEsU0FBTztBQUNMZSxJQUFBQSxXQUFXLEVBQVhBLFdBREs7QUFFTEssSUFBQUEsT0FBTyxFQUFQQSxPQUZLO0FBR0xoQixJQUFBQSxXQUFXLEVBQVhBLFdBSEs7QUFJTGUsSUFBQUEsS0FBSyxFQUFMQSxLQUpLO0FBS0xSLElBQUFBLE9BQU8sRUFBUEEsT0FMSztBQU1MTSxJQUFBQSxJQUFJLEVBQUpBLElBTks7QUFPTEksSUFBQUEsTUFBTSxFQUFOQSxNQVBLO0FBUUxDLElBQUFBLEtBQUssRUFBRXZCLFFBQVEsQ0FBQ3VCLEtBUlgsRUFBUDs7QUFVRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG5pbXBvcnQgeyBJR05PUkVfREVGQVVMVCwgZ2V0RGVzY3JpcHRpb24sIGdldENvbW1lbnQsIEVNUFRZIH0gZnJvbSAnLi92YXJpYWJsZXMnXG5pbXBvcnQgcHJvY2Vzc1RhZ3MgZnJvbSAnLi9wcm9jZXNzVGFncydcbmltcG9ydCBwcm9jZXNzUHJvcHMgZnJvbSAnLi9wcm9jZXNzUHJvcHMnXG5pbXBvcnQgcHJvY2Vzc01ldGhvZHMgZnJvbSAnLi9wcm9jZXNzTWV0aG9kcydcbmltcG9ydCBwcm9jZXNzRXZlbnRzIGZyb20gJy4vcHJvY2Vzc0V2ZW50cydcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VnVlRG9jKHN0YXRlRG9jLCBjb21wb25lbnQpIHtcbiAgbGV0IGRvY0pzRmlsZSA9IHN0YXRlRG9jLmdldERvY0pzKClcbiAgbGV0IGRvY0NvbXBvbmVudFxuXG4gIGNvbnN0IGRpc3BsYXlOYW1lID1cbiAgICAhY29tcG9uZW50Lm5hbWUgfHwgY29tcG9uZW50Lm5hbWUgPT09ICcnIC8vIGlmIGNvbXBvbmVudCBkb2VzIG5vdCBoYXZlIGEgbmFtZSwgdXNlIHRoZSBuYW1lIG9mIHRoZSBmaWxlIGNvbnRhaW5pbmcgaXRcbiAgICAgID8gcGF0aC5iYXNlbmFtZShzdGF0ZURvYy5maWxlLCBwYXRoLmV4dG5hbWUoc3RhdGVEb2MuZmlsZSkpXG4gICAgICA6IGNvbXBvbmVudC5uYW1lXG5cbiAgaWYgKGRvY0pzRmlsZSkge1xuICAgIGRvY0pzRmlsZSA9IGRvY0pzRmlsZS5maWx0ZXIoY29tbWVudCA9PiB7XG4gICAgICByZXR1cm4gY29tbWVudC5raW5kICE9PSAncGFja2FnZSdcbiAgICB9KVxuICAgIGRvY0NvbXBvbmVudCA9IGRvY0pzRmlsZS5maWx0ZXIoY29tbWVudCA9PiB7XG4gICAgICByZXR1cm4gY29tbWVudC5sb25nbmFtZSA9PT0gJ21vZHVsZS5leHBvcnRzJyB8fCBjb21tZW50LmxvbmduYW1lLm1hdGNoKC8oXyk/ZGVmYXVsdChcXGQrKT8kL2cpXG4gICAgfSlbMF1cbiAgfSBlbHNlIHtcbiAgICBkb2NKc0ZpbGUgPSBbXVxuICAgIGRvY0NvbXBvbmVudCA9IGZhbHNlXG4gIH1cblxuICBsZXQgZGVzY3JpcHRpb24gPSBFTVBUWVxuICBsZXQgY29tbWVudCA9IEVNUFRZXG4gIGxldCB0YWdzID0ge31cbiAgaWYgKGRvY0NvbXBvbmVudCkge1xuICAgIGRlc2NyaXB0aW9uID0gZ2V0RGVzY3JpcHRpb24oZG9jQ29tcG9uZW50KVxuICAgIGNvbW1lbnQgPSBnZXRDb21tZW50KGRvY0NvbXBvbmVudClcbiAgICB0YWdzID0gcHJvY2Vzc1RhZ3MoZG9jQ29tcG9uZW50LCBJR05PUkVfREVGQVVMVClcbiAgfVxuICBjb25zdCBwcm9wcyA9IHByb2Nlc3NQcm9wcyhkb2NKc0ZpbGUsIGNvbXBvbmVudClcbiAgY29uc3QgbWV0aG9kcyA9IHByb2Nlc3NNZXRob2RzKGRvY0pzRmlsZSwgY29tcG9uZW50KVxuICBjb25zdCBldmVudHMgPSBwcm9jZXNzRXZlbnRzKGRvY0pzRmlsZSwgY29tcG9uZW50KVxuXG4gIHJldHVybiB7XG4gICAgZGVzY3JpcHRpb24sXG4gICAgbWV0aG9kcyxcbiAgICBkaXNwbGF5TmFtZSxcbiAgICBwcm9wcyxcbiAgICBjb21tZW50LFxuICAgIHRhZ3MsXG4gICAgZXZlbnRzLFxuICAgIHNsb3RzOiBzdGF0ZURvYy5zbG90cyxcbiAgfVxufVxuIl19