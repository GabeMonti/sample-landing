"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _fs = _interopRequireDefault(require("fs"));
var _path = _interopRequireDefault(require("path"));
var _stateDoc = _interopRequireDefault(require("./stateDoc"));
var _parseModule = _interopRequireDefault(require("./parseModule"));
var _evalComponentCode = _interopRequireDefault(require("./evalComponentCode"));

module.exports = function getMixin(listRequire) {
  var output = [];
  listRequire.forEach(function (filePath) {
    var pathRequire = filePath;
    try {
      if (_fs.default.lstatSync(pathRequire).isDirectory()) {
        pathRequire = _path.default.join(pathRequire, 'index.js');
      }
    } catch (e) {}
    var hasJSExt = _path.default.extname(pathRequire) === '.js';
    if (!hasJSExt) {
      pathRequire = filePath + '.js';
    }
    if (_fs.default.existsSync(pathRequire)) {
      var source = _fs.default.readFileSync(pathRequire, {
        encoding: 'utf-8' });

      var doc = _stateDoc.default.getDocFile(source, pathRequire);
      _stateDoc.default.saveMixin(doc, pathRequire);
      if (_stateDoc.default.isMixin()) {
        var parsedSource = (0, _parseModule.default)(source, filePath, _stateDoc.default.jscodeLang);
        var mixin = (0, _evalComponentCode.default)(parsedSource);
        if (Object.keys(mixin.exports).length === 0) {
          mixin.exports.default = mixin.module.exports;
        }
        if (mixin.exports.default) {
          output.push(mixin.exports.default);
        }
      }
    }
  });
  return output;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9nZXRNaXhpbi5qcyJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZ2V0TWl4aW4iLCJsaXN0UmVxdWlyZSIsIm91dHB1dCIsImZvckVhY2giLCJmaWxlUGF0aCIsInBhdGhSZXF1aXJlIiwiZnMiLCJsc3RhdFN5bmMiLCJpc0RpcmVjdG9yeSIsInBhdGgiLCJqb2luIiwiZSIsImhhc0pTRXh0IiwiZXh0bmFtZSIsImV4aXN0c1N5bmMiLCJzb3VyY2UiLCJyZWFkRmlsZVN5bmMiLCJlbmNvZGluZyIsImRvYyIsInN0YXRlRG9jIiwiZ2V0RG9jRmlsZSIsInNhdmVNaXhpbiIsImlzTWl4aW4iLCJwYXJzZWRTb3VyY2UiLCJqc2NvZGVMYW5nIiwibWl4aW4iLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwiZGVmYXVsdCIsInB1c2giXSwibWFwcGluZ3MiOiJrR0FBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsU0FBU0MsUUFBVCxDQUFrQkMsV0FBbEIsRUFBK0I7QUFDOUMsTUFBTUMsTUFBTSxHQUFHLEVBQWY7QUFDQUQsRUFBQUEsV0FBVyxDQUFDRSxPQUFaLENBQW9CLFVBQUFDLFFBQVEsRUFBSTtBQUM5QixRQUFJQyxXQUFXLEdBQUdELFFBQWxCO0FBQ0EsUUFBSTtBQUNGLFVBQUlFLFlBQUdDLFNBQUgsQ0FBYUYsV0FBYixFQUEwQkcsV0FBMUIsRUFBSixFQUE2QztBQUMzQ0gsUUFBQUEsV0FBVyxHQUFHSSxjQUFLQyxJQUFMLENBQVVMLFdBQVYsRUFBdUIsVUFBdkIsQ0FBZDtBQUNEO0FBQ0YsS0FKRCxDQUlFLE9BQU9NLENBQVAsRUFBVSxDQUFFO0FBQ2QsUUFBTUMsUUFBUSxHQUFHSCxjQUFLSSxPQUFMLENBQWFSLFdBQWIsTUFBOEIsS0FBL0M7QUFDQSxRQUFJLENBQUNPLFFBQUwsRUFBZTtBQUNiUCxNQUFBQSxXQUFXLEdBQUdELFFBQVEsR0FBRyxLQUF6QjtBQUNEO0FBQ0QsUUFBSUUsWUFBR1EsVUFBSCxDQUFjVCxXQUFkLENBQUosRUFBZ0M7QUFDOUIsVUFBTVUsTUFBTSxHQUFHVCxZQUFHVSxZQUFILENBQWdCWCxXQUFoQixFQUE2QjtBQUMxQ1ksUUFBQUEsUUFBUSxFQUFFLE9BRGdDLEVBQTdCLENBQWY7O0FBR0EsVUFBTUMsR0FBRyxHQUFHQyxrQkFBU0MsVUFBVCxDQUFvQkwsTUFBcEIsRUFBNEJWLFdBQTVCLENBQVo7QUFDQWMsd0JBQVNFLFNBQVQsQ0FBbUJILEdBQW5CLEVBQXdCYixXQUF4QjtBQUNBLFVBQUljLGtCQUFTRyxPQUFULEVBQUosRUFBd0I7QUFDdEIsWUFBTUMsWUFBWSxHQUFHLDBCQUFZUixNQUFaLEVBQW9CWCxRQUFwQixFQUE4QmUsa0JBQVNLLFVBQXZDLENBQXJCO0FBQ0EsWUFBTUMsS0FBSyxHQUFHLGdDQUFrQkYsWUFBbEIsQ0FBZDtBQUNBLFlBQUlHLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZRixLQUFLLENBQUMxQixPQUFsQixFQUEyQjZCLE1BQTNCLEtBQXNDLENBQTFDLEVBQTZDO0FBQzNDSCxVQUFBQSxLQUFLLENBQUMxQixPQUFOLENBQWM4QixPQUFkLEdBQXdCSixLQUFLLENBQUMzQixNQUFOLENBQWFDLE9BQXJDO0FBQ0Q7QUFDRCxZQUFJMEIsS0FBSyxDQUFDMUIsT0FBTixDQUFjOEIsT0FBbEIsRUFBMkI7QUFDekIzQixVQUFBQSxNQUFNLENBQUM0QixJQUFQLENBQVlMLEtBQUssQ0FBQzFCLE9BQU4sQ0FBYzhCLE9BQTFCO0FBQ0Q7QUFDRjtBQUNGO0FBQ0YsR0E1QkQ7QUE2QkEsU0FBTzNCLE1BQVA7QUFDRCxDQWhDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBmcyBmcm9tICdmcydcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnXG5pbXBvcnQgc3RhdGVEb2MgZnJvbSAnLi9zdGF0ZURvYydcbmltcG9ydCBwYXJzZU1vZHVsZSBmcm9tICcuL3BhcnNlTW9kdWxlJ1xuaW1wb3J0IGV2YWxDb21wb25lbnRDb2RlIGZyb20gJy4vZXZhbENvbXBvbmVudENvZGUnXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0TWl4aW4obGlzdFJlcXVpcmUpIHtcbiAgY29uc3Qgb3V0cHV0ID0gW11cbiAgbGlzdFJlcXVpcmUuZm9yRWFjaChmaWxlUGF0aCA9PiB7XG4gICAgbGV0IHBhdGhSZXF1aXJlID0gZmlsZVBhdGhcbiAgICB0cnkge1xuICAgICAgaWYgKGZzLmxzdGF0U3luYyhwYXRoUmVxdWlyZSkuaXNEaXJlY3RvcnkoKSkge1xuICAgICAgICBwYXRoUmVxdWlyZSA9IHBhdGguam9pbihwYXRoUmVxdWlyZSwgJ2luZGV4LmpzJylcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIGNvbnN0IGhhc0pTRXh0ID0gcGF0aC5leHRuYW1lKHBhdGhSZXF1aXJlKSA9PT0gJy5qcydcbiAgICBpZiAoIWhhc0pTRXh0KSB7XG4gICAgICBwYXRoUmVxdWlyZSA9IGZpbGVQYXRoICsgJy5qcydcbiAgICB9XG4gICAgaWYgKGZzLmV4aXN0c1N5bmMocGF0aFJlcXVpcmUpKSB7XG4gICAgICBjb25zdCBzb3VyY2UgPSBmcy5yZWFkRmlsZVN5bmMocGF0aFJlcXVpcmUsIHtcbiAgICAgICAgZW5jb2Rpbmc6ICd1dGYtOCcsXG4gICAgICB9KVxuICAgICAgY29uc3QgZG9jID0gc3RhdGVEb2MuZ2V0RG9jRmlsZShzb3VyY2UsIHBhdGhSZXF1aXJlKVxuICAgICAgc3RhdGVEb2Muc2F2ZU1peGluKGRvYywgcGF0aFJlcXVpcmUpXG4gICAgICBpZiAoc3RhdGVEb2MuaXNNaXhpbigpKSB7XG4gICAgICAgIGNvbnN0IHBhcnNlZFNvdXJjZSA9IHBhcnNlTW9kdWxlKHNvdXJjZSwgZmlsZVBhdGgsIHN0YXRlRG9jLmpzY29kZUxhbmcpXG4gICAgICAgIGNvbnN0IG1peGluID0gZXZhbENvbXBvbmVudENvZGUocGFyc2VkU291cmNlKVxuICAgICAgICBpZiAoT2JqZWN0LmtleXMobWl4aW4uZXhwb3J0cykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgbWl4aW4uZXhwb3J0cy5kZWZhdWx0ID0gbWl4aW4ubW9kdWxlLmV4cG9ydHNcbiAgICAgICAgfVxuICAgICAgICBpZiAobWl4aW4uZXhwb3J0cy5kZWZhdWx0KSB7XG4gICAgICAgICAgb3V0cHV0LnB1c2gobWl4aW4uZXhwb3J0cy5kZWZhdWx0KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KVxuICByZXR1cm4gb3V0cHV0XG59XG4iXX0=