{"remainingRequest":"/home/gabriel/Documentos/Projetos/2Tor/longtail/node_modules/babel-loader/lib/index.js!/home/gabriel/Documentos/Projetos/2Tor/longtail/node_modules/eslint-loader/index.js??ref--13-0!/home/gabriel/Documentos/Projetos/2Tor/longtail/src/config/LoginValidate.js","dependencies":[{"path":"/home/gabriel/Documentos/Projetos/2Tor/longtail/src/config/LoginValidate.js","mtime":1545238252738},{"path":"/home/gabriel/Documentos/Projetos/2Tor/longtail/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/gabriel/Documentos/Projetos/2Tor/longtail/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/gabriel/Documentos/Projetos/2Tor/longtail/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport _classCallCheck from \"/home/gabriel/Documentos/Projetos/2Tor/longtail/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/gabriel/Documentos/Projetos/2Tor/longtail/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\n\nvar LoginValidate =\n/*#__PURE__*/\nfunction () {\n  function LoginValidate(to, token) {\n    _classCallCheck(this, LoginValidate);\n\n    this.to = to;\n    this.token = token;\n    this.needToAuthorize = to.matched.some(function (record) {\n      return record.meta.requiresAuth;\n    });\n    this.isAnonymous = this.defineAnonymous();\n  }\n\n  _createClass(LoginValidate, [{\n    key: \"getPageToGo\",\n    value: function getPageToGo(page) {\n      return {\n        name: page,\n        params: this.to.params,\n        query: {\n          redirect: this.to.fullPath\n        }\n      };\n    }\n  }, {\n    key: \"validateToken\",\n    value: function validateToken() {\n      // check the authorize define in\n      if (this.needToAuthorize) {\n        // Route need authentication\n        if (this.token) {\n          // Have a Token\n          if (this.isAnonymous) {\n            // But Token is anonymous\n            if (this.getAnonymousRoutes() != null) {\n              // Route is not open return to login\n              return this.getPageToGo('login');\n            }\n          } else {\n            return this.getPageToGo();\n          }\n        } else {\n          return this.getPageToGo('login');\n        }\n      }\n    }\n  }, {\n    key: \"getAnonymousRoutes\",\n    value: function getAnonymousRoutes() {\n      var _this = this;\n\n      var openRoutes = ['catalog', 'login', 'home'];\n      var routeEnabled = openRoutes.filter(function (isOpen) {\n        return _this.to.name == isOpen;\n      });\n      return routeEnabled;\n    }\n  }, {\n    key: \"defineAnonymous\",\n    value: function defineAnonymous() {\n      if (this.token) {\n        return this.token.userId == 'anonymous' ? true : false;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"eraseToken\",\n    value: function eraseToken() {\n      localStorage.removeItem('token');\n      localStorage.removeItem('data');\n      localStorage.removeItem('websiteSlug');\n      this.getPageToGo('login');\n    }\n  }]);\n\n  return LoginValidate;\n}();\n\nexport { LoginValidate as default };",{"version":3,"sources":["/home/gabriel/Documentos/Projetos/2Tor/longtail/src/config/LoginValidate.js"],"names":["LoginValidate","to","token","needToAuthorize","matched","some","record","meta","requiresAuth","isAnonymous","defineAnonymous","page","name","params","query","redirect","fullPath","getAnonymousRoutes","getPageToGo","openRoutes","routeEnabled","filter","isOpen","userId","localStorage","removeItem"],"mappings":";;;;IAAqBA,a;;;AACnB,yBAAYC,EAAZ,EAAgBC,KAAhB,EAAuB;AAAA;;AACrB,SAAKD,EAAL,GAAUA,EAAV;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,eAAL,GAAuBF,EAAE,CAACG,OAAH,CAAWC,IAAX,CAAgB,UAAAC,MAAM;AAAA,aAAIA,MAAM,CAACC,IAAP,CAAYC,YAAhB;AAAA,KAAtB,CAAvB;AACA,SAAKC,WAAL,GAAmB,KAAKC,eAAL,EAAnB;AACD;;;;gCAEWC,I,EAAM;AAChB,aAAO;AAAEC,QAAAA,IAAI,EAAED,IAAR;AAAcE,QAAAA,MAAM,EAAE,KAAKZ,EAAL,CAAQY,MAA9B;AAAsCC,QAAAA,KAAK,EAAE;AAAEC,UAAAA,QAAQ,EAAE,KAAKd,EAAL,CAAQe;AAApB;AAA7C,OAAP;AACD;;;oCAEe;AACd;AACA,UAAG,KAAKb,eAAR,EAAwB;AAAE;AACxB,YAAI,KAAKD,KAAT,EAAgB;AAAE;AACd,cAAG,KAAKO,WAAR,EAAqB;AAAE;AACrB,gBAAG,KAAKQ,kBAAL,MAA6B,IAAhC,EAAsC;AAAE;AACtC,qBAAO,KAAKC,WAAL,CAAiB,OAAjB,CAAP;AACD;AACF,WAJD,MAIO;AACL,mBAAO,KAAKA,WAAL,EAAP;AACD;AACF,SARH,MASK;AACH,iBAAO,KAAKA,WAAL,CAAiB,OAAjB,CAAP;AACD;AACF;AACF;;;yCAEoB;AAAA;;AACnB,UAAMC,UAAU,GAAG,CAAC,SAAD,EAAY,OAAZ,EAAqB,MAArB,CAAnB;AACA,UAAIC,YAAY,GAAGD,UAAU,CAACE,MAAX,CAAkB,UAAAC,MAAM;AAAA,eAAI,KAAI,CAACrB,EAAL,CAAQW,IAAR,IAAgBU,MAApB;AAAA,OAAxB,CAAnB;AACA,aAAOF,YAAP;AACD;;;sCAEiB;AAChB,UAAG,KAAKlB,KAAR,EAAe;AACb,eAAO,KAAKA,KAAL,CAAWqB,MAAX,IAAqB,WAArB,GAAmC,IAAnC,GAA0C,KAAjD;AACD,OAFD,MAEO;AACL,eAAO,KAAP;AACD;AACF;;;iCAEY;AACXC,MAAAA,YAAY,CAACC,UAAb,CAAwB,OAAxB;AACAD,MAAAA,YAAY,CAACC,UAAb,CAAwB,MAAxB;AACAD,MAAAA,YAAY,CAACC,UAAb,CAAwB,aAAxB;AACA,WAAKP,WAAL,CAAiB,OAAjB;AACD;;;;;;SAjDkBlB,a","sourcesContent":["export default class LoginValidate {\n  constructor(to, token) {\n    this.to = to\n    this.token = token\n    this.needToAuthorize = to.matched.some(record => record.meta.requiresAuth)\n    this.isAnonymous = this.defineAnonymous()\n  }\n\n  getPageToGo(page) {\n    return { name: page, params: this.to.params, query: { redirect: this.to.fullPath }}\n  }\n\n  validateToken() {\n    // check the authorize define in\n    if(this.needToAuthorize){ // Route need authentication\n      if (this.token) { // Have a Token\n          if(this.isAnonymous) { // But Token is anonymous\n            if(this.getAnonymousRoutes() != null) { // Route is not open return to login\n              return this.getPageToGo('login')\n            }\n          } else {\n            return this.getPageToGo()\n          }\n        }\n      else {\n        return this.getPageToGo('login')\n      }\n    }\n  }\n\n  getAnonymousRoutes() {\n    const openRoutes = ['catalog', 'login', 'home']\n    let routeEnabled = openRoutes.filter(isOpen => this.to.name == isOpen)\n    return routeEnabled\n  }\n\n  defineAnonymous() {\n    if(this.token) {\n      return this.token.userId == 'anonymous' ? true : false\n    } else {\n      return false\n    }\n  }\n\n  eraseToken() {\n    localStorage.removeItem('token')\n    localStorage.removeItem('data')\n    localStorage.removeItem('websiteSlug')\n    this.getPageToGo('login')\n  }\n}\n"]}]}