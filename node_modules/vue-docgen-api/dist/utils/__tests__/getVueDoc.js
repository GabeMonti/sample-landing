"use strict";var getVueDoc = require('../getVueDoc').default;

describe('getVueDoc', function () {
  it('should return right comment for longname default', function () {
    var result = getVueDoc(
    {
      file: '',
      getDocJs: function getDocJs() {return [
        {
          description: 'Component description',
          longname: 'default' },

        {
          description: 'Prop description',
          longname: 'default.props.prop' }];} },



    {});

    expect(result.description).toEqual('Component description');
  });

  it('should return right comment for longname _default', function () {
    var result = getVueDoc(
    {
      file: '',
      getDocJs: function getDocJs() {return [
        {
          description: 'Component description',
          longname: '_default' },

        {
          description: 'Prop description',
          longname: '_default.props.prop' }];} },



    {});

    expect(result.description).toEqual('Component description');
  });

  it('should return right comment for longname default2', function () {
    var result = getVueDoc(
    {
      file: '',
      getDocJs: function getDocJs() {return [
        {
          description: 'Component description',
          longname: 'default2' },

        {
          description: 'Prop description',
          longname: 'default2.props.prop' }];} },



    {});

    expect(result.description).toEqual('Component description');
  });

  it('should return right comment for longname _default2', function () {
    var result = getVueDoc(
    {
      file: '',
      getDocJs: function getDocJs() {return [
        {
          description: 'Component description',
          longname: '_default2' },

        {
          description: 'Prop description',
          longname: '_default2.props.prop' }];} },



    {});

    expect(result.description).toEqual('Component description');
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9fX3Rlc3RzX18vZ2V0VnVlRG9jLmpzIl0sIm5hbWVzIjpbImdldFZ1ZURvYyIsInJlcXVpcmUiLCJkZWZhdWx0IiwiZGVzY3JpYmUiLCJpdCIsInJlc3VsdCIsImZpbGUiLCJnZXREb2NKcyIsImRlc2NyaXB0aW9uIiwibG9uZ25hbWUiLCJleHBlY3QiLCJ0b0VxdWFsIl0sIm1hcHBpbmdzIjoiYUFBQSxJQUFJQSxTQUFTLEdBQUdDLE9BQU8sQ0FBQyxjQUFELENBQVAsQ0FBd0JDLE9BQXhDOztBQUVBQyxRQUFRLENBQUMsV0FBRCxFQUFjLFlBQU07QUFDMUJDLEVBQUFBLEVBQUUsQ0FBQyxrREFBRCxFQUFxRCxZQUFNO0FBQzNELFFBQU1DLE1BQU0sR0FBR0wsU0FBUztBQUN0QjtBQUNFTSxNQUFBQSxJQUFJLEVBQUUsRUFEUjtBQUVFQyxNQUFBQSxRQUFRLEVBQUUsNEJBQU07QUFDZDtBQUNFQyxVQUFBQSxXQUFXLEVBQUUsdUJBRGY7QUFFRUMsVUFBQUEsUUFBUSxFQUFFLFNBRlosRUFEYzs7QUFLZDtBQUNFRCxVQUFBQSxXQUFXLEVBQUUsa0JBRGY7QUFFRUMsVUFBQUEsUUFBUSxFQUFFLG9CQUZaLEVBTGMsQ0FBTixFQUZaLEVBRHNCOzs7O0FBY3RCLE1BZHNCLENBQXhCOztBQWdCQUMsSUFBQUEsTUFBTSxDQUFDTCxNQUFNLENBQUNHLFdBQVIsQ0FBTixDQUEyQkcsT0FBM0IsQ0FBbUMsdUJBQW5DO0FBQ0QsR0FsQkMsQ0FBRjs7QUFvQkFQLEVBQUFBLEVBQUUsQ0FBQyxtREFBRCxFQUFzRCxZQUFNO0FBQzVELFFBQU1DLE1BQU0sR0FBR0wsU0FBUztBQUN0QjtBQUNFTSxNQUFBQSxJQUFJLEVBQUUsRUFEUjtBQUVFQyxNQUFBQSxRQUFRLEVBQUUsNEJBQU07QUFDZDtBQUNFQyxVQUFBQSxXQUFXLEVBQUUsdUJBRGY7QUFFRUMsVUFBQUEsUUFBUSxFQUFFLFVBRlosRUFEYzs7QUFLZDtBQUNFRCxVQUFBQSxXQUFXLEVBQUUsa0JBRGY7QUFFRUMsVUFBQUEsUUFBUSxFQUFFLHFCQUZaLEVBTGMsQ0FBTixFQUZaLEVBRHNCOzs7O0FBY3RCLE1BZHNCLENBQXhCOztBQWdCQUMsSUFBQUEsTUFBTSxDQUFDTCxNQUFNLENBQUNHLFdBQVIsQ0FBTixDQUEyQkcsT0FBM0IsQ0FBbUMsdUJBQW5DO0FBQ0QsR0FsQkMsQ0FBRjs7QUFvQkFQLEVBQUFBLEVBQUUsQ0FBQyxtREFBRCxFQUFzRCxZQUFNO0FBQzVELFFBQU1DLE1BQU0sR0FBR0wsU0FBUztBQUN0QjtBQUNFTSxNQUFBQSxJQUFJLEVBQUUsRUFEUjtBQUVFQyxNQUFBQSxRQUFRLEVBQUUsNEJBQU07QUFDZDtBQUNFQyxVQUFBQSxXQUFXLEVBQUUsdUJBRGY7QUFFRUMsVUFBQUEsUUFBUSxFQUFFLFVBRlosRUFEYzs7QUFLZDtBQUNFRCxVQUFBQSxXQUFXLEVBQUUsa0JBRGY7QUFFRUMsVUFBQUEsUUFBUSxFQUFFLHFCQUZaLEVBTGMsQ0FBTixFQUZaLEVBRHNCOzs7O0FBY3RCLE1BZHNCLENBQXhCOztBQWdCQUMsSUFBQUEsTUFBTSxDQUFDTCxNQUFNLENBQUNHLFdBQVIsQ0FBTixDQUEyQkcsT0FBM0IsQ0FBbUMsdUJBQW5DO0FBQ0QsR0FsQkMsQ0FBRjs7QUFvQkFQLEVBQUFBLEVBQUUsQ0FBQyxvREFBRCxFQUF1RCxZQUFNO0FBQzdELFFBQU1DLE1BQU0sR0FBR0wsU0FBUztBQUN0QjtBQUNFTSxNQUFBQSxJQUFJLEVBQUUsRUFEUjtBQUVFQyxNQUFBQSxRQUFRLEVBQUUsNEJBQU07QUFDZDtBQUNFQyxVQUFBQSxXQUFXLEVBQUUsdUJBRGY7QUFFRUMsVUFBQUEsUUFBUSxFQUFFLFdBRlosRUFEYzs7QUFLZDtBQUNFRCxVQUFBQSxXQUFXLEVBQUUsa0JBRGY7QUFFRUMsVUFBQUEsUUFBUSxFQUFFLHNCQUZaLEVBTGMsQ0FBTixFQUZaLEVBRHNCOzs7O0FBY3RCLE1BZHNCLENBQXhCOztBQWdCQUMsSUFBQUEsTUFBTSxDQUFDTCxNQUFNLENBQUNHLFdBQVIsQ0FBTixDQUEyQkcsT0FBM0IsQ0FBbUMsdUJBQW5DO0FBQ0QsR0FsQkMsQ0FBRjtBQW1CRCxDQWhGTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGdldFZ1ZURvYyA9IHJlcXVpcmUoJy4uL2dldFZ1ZURvYycpLmRlZmF1bHRcblxuZGVzY3JpYmUoJ2dldFZ1ZURvYycsICgpID0+IHtcbiAgaXQoJ3Nob3VsZCByZXR1cm4gcmlnaHQgY29tbWVudCBmb3IgbG9uZ25hbWUgZGVmYXVsdCcsICgpID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSBnZXRWdWVEb2MoXG4gICAgICB7XG4gICAgICAgIGZpbGU6ICcnLFxuICAgICAgICBnZXREb2NKczogKCkgPT4gW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnQ29tcG9uZW50IGRlc2NyaXB0aW9uJyxcbiAgICAgICAgICAgIGxvbmduYW1lOiAnZGVmYXVsdCcsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1Byb3AgZGVzY3JpcHRpb24nLFxuICAgICAgICAgICAgbG9uZ25hbWU6ICdkZWZhdWx0LnByb3BzLnByb3AnLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICB9LFxuICAgICAge31cbiAgICApXG4gICAgZXhwZWN0KHJlc3VsdC5kZXNjcmlwdGlvbikudG9FcXVhbCgnQ29tcG9uZW50IGRlc2NyaXB0aW9uJylcbiAgfSlcblxuICBpdCgnc2hvdWxkIHJldHVybiByaWdodCBjb21tZW50IGZvciBsb25nbmFtZSBfZGVmYXVsdCcsICgpID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSBnZXRWdWVEb2MoXG4gICAgICB7XG4gICAgICAgIGZpbGU6ICcnLFxuICAgICAgICBnZXREb2NKczogKCkgPT4gW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnQ29tcG9uZW50IGRlc2NyaXB0aW9uJyxcbiAgICAgICAgICAgIGxvbmduYW1lOiAnX2RlZmF1bHQnLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246ICdQcm9wIGRlc2NyaXB0aW9uJyxcbiAgICAgICAgICAgIGxvbmduYW1lOiAnX2RlZmF1bHQucHJvcHMucHJvcCcsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIH0sXG4gICAgICB7fVxuICAgIClcbiAgICBleHBlY3QocmVzdWx0LmRlc2NyaXB0aW9uKS50b0VxdWFsKCdDb21wb25lbnQgZGVzY3JpcHRpb24nKVxuICB9KVxuXG4gIGl0KCdzaG91bGQgcmV0dXJuIHJpZ2h0IGNvbW1lbnQgZm9yIGxvbmduYW1lIGRlZmF1bHQyJywgKCkgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IGdldFZ1ZURvYyhcbiAgICAgIHtcbiAgICAgICAgZmlsZTogJycsXG4gICAgICAgIGdldERvY0pzOiAoKSA9PiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246ICdDb21wb25lbnQgZGVzY3JpcHRpb24nLFxuICAgICAgICAgICAgbG9uZ25hbWU6ICdkZWZhdWx0MicsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1Byb3AgZGVzY3JpcHRpb24nLFxuICAgICAgICAgICAgbG9uZ25hbWU6ICdkZWZhdWx0Mi5wcm9wcy5wcm9wJyxcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICAgIHt9XG4gICAgKVxuICAgIGV4cGVjdChyZXN1bHQuZGVzY3JpcHRpb24pLnRvRXF1YWwoJ0NvbXBvbmVudCBkZXNjcmlwdGlvbicpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCByZXR1cm4gcmlnaHQgY29tbWVudCBmb3IgbG9uZ25hbWUgX2RlZmF1bHQyJywgKCkgPT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IGdldFZ1ZURvYyhcbiAgICAgIHtcbiAgICAgICAgZmlsZTogJycsXG4gICAgICAgIGdldERvY0pzOiAoKSA9PiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246ICdDb21wb25lbnQgZGVzY3JpcHRpb24nLFxuICAgICAgICAgICAgbG9uZ25hbWU6ICdfZGVmYXVsdDInLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgZGVzY3JpcHRpb246ICdQcm9wIGRlc2NyaXB0aW9uJyxcbiAgICAgICAgICAgIGxvbmduYW1lOiAnX2RlZmF1bHQyLnByb3BzLnByb3AnLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICB9LFxuICAgICAge31cbiAgICApXG4gICAgZXhwZWN0KHJlc3VsdC5kZXNjcmlwdGlvbikudG9FcXVhbCgnQ29tcG9uZW50IGRlc2NyaXB0aW9uJylcbiAgfSlcbn0pXG4iXX0=