"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));var _vm = _interopRequireDefault(require("vm"));

function clone(obj) {
  if (null == obj || 'object' != (0, _typeof2.default)(obj)) return obj;
  var copy = obj.constructor();
  for (var attr in obj) {
    if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];
  }
  return copy;
}

module.exports = function evalComponentCode(code) {
  try {


    // Fake require
    var fakeRequire = function fakeRequire() {};var script = new _vm.default.Script(code, {});
    fakeRequire.default = fakeRequire;

    var requireSanbox = function requireSanbox(element) {
      // depending on the preset that one is running,
      // babel will not always use the root interopRequireDefault
      // for babel es6, it uses .../builtin/es6/interop...
      if (/@babel[\\,\/]runtime(.*)\/helpers\/.*interopRequireDefault$/.test(element)) {
        return function (value) {
          return value;
        };
      }
      if (element === 'vuex') {
        var outputVuex = {
          mapState: function mapState() {},
          mapMutations: function mapMutations() {},
          mapGetters: function mapGetters() {},
          mapActions: function mapActions() {},
          createNamespacedHelpers: function createNamespacedHelpers() {} };

        return (0, _objectSpread2.default)({},
        outputVuex, {
          default: outputVuex });

      }
      if (element === 'vue') {
        var outputVue = {
          __esModule: true,
          use: function use() {},
          directive: function use() {},
          component: function component() {},
          extended: function extended() {},
          extend: function extend(obj) {
            return obj;
          } };

        return (0, _objectSpread2.default)({},
        outputVue, {
          default: outputVue });

      }
      return fakeRequire;
    };
    requireSanbox.context = function () {
      return function () {};
    };
    var sandbox = {
      exports: {},
      module: {
        exports: {} },

      require: requireSanbox,
      document: {},
      window: {
        location: {} },

      alert: function alert() {},
      confirm: function confirm() {},
      console: {
        log: function log() {},
        debug: function debug() {} },

      sessionStorage: {
        getItem: function getItem() {},
        setItem: function setItem() {},
        removeItem: function removeItem() {} },

      localStorage: {
        getItem: function getItem() {},
        setItem: function setItem() {},
        removeItem: function removeItem() {} } };


    var context = new _vm.default.createContext(sandbox);
    script.runInContext(context);
    var output = sandbox;
    return clone(output);
  } catch (err) {
    throw err;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9ldmFsQ29tcG9uZW50Q29kZS5qcyJdLCJuYW1lcyI6WyJjbG9uZSIsIm9iaiIsImNvcHkiLCJjb25zdHJ1Y3RvciIsImF0dHIiLCJoYXNPd25Qcm9wZXJ0eSIsIm1vZHVsZSIsImV4cG9ydHMiLCJldmFsQ29tcG9uZW50Q29kZSIsImNvZGUiLCJmYWtlUmVxdWlyZSIsInNjcmlwdCIsInZtIiwiU2NyaXB0IiwiZGVmYXVsdCIsInJlcXVpcmVTYW5ib3giLCJlbGVtZW50IiwidGVzdCIsInZhbHVlIiwib3V0cHV0VnVleCIsIm1hcFN0YXRlIiwibWFwTXV0YXRpb25zIiwibWFwR2V0dGVycyIsIm1hcEFjdGlvbnMiLCJjcmVhdGVOYW1lc3BhY2VkSGVscGVycyIsIm91dHB1dFZ1ZSIsIl9fZXNNb2R1bGUiLCJ1c2UiLCJkaXJlY3RpdmUiLCJjb21wb25lbnQiLCJleHRlbmRlZCIsImV4dGVuZCIsImNvbnRleHQiLCJzYW5kYm94IiwicmVxdWlyZSIsImRvY3VtZW50Iiwid2luZG93IiwibG9jYXRpb24iLCJhbGVydCIsImNvbmZpcm0iLCJjb25zb2xlIiwibG9nIiwiZGVidWciLCJzZXNzaW9uU3RvcmFnZSIsImdldEl0ZW0iLCJzZXRJdGVtIiwicmVtb3ZlSXRlbSIsImxvY2FsU3RvcmFnZSIsImNyZWF0ZUNvbnRleHQiLCJydW5JbkNvbnRleHQiLCJvdXRwdXQiLCJlcnIiXSwibWFwcGluZ3MiOiI4UUFBQTs7QUFFQSxTQUFTQSxLQUFULENBQWVDLEdBQWYsRUFBb0I7QUFDbEIsTUFBSSxRQUFRQSxHQUFSLElBQWUsa0NBQW1CQSxHQUFuQixDQUFuQixFQUEyQyxPQUFPQSxHQUFQO0FBQzNDLE1BQUlDLElBQUksR0FBR0QsR0FBRyxDQUFDRSxXQUFKLEVBQVg7QUFDQSxPQUFLLElBQUlDLElBQVQsSUFBaUJILEdBQWpCLEVBQXNCO0FBQ3BCLFFBQUlBLEdBQUcsQ0FBQ0ksY0FBSixDQUFtQkQsSUFBbkIsQ0FBSixFQUE4QkYs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Yyx3QkFHRCxDQUFFLENBSEQsRUFoQkY7O0FBcUJkQyxNQUFBQSxZQUFZLEVBQUU7QUFDWkgsUUFBQUEsT0FEWSxxQkFDRixDQUFFLENBREE7QUFFWkMsUUFBQUEsT0FGWSxxQkFFRixDQUFFLENBRkE7QUFHWkMsUUFBQUEsVUFIWSx3QkFHQyxDQUFFLENBSEgsRUFyQkEsRUFBaEI7OztBQTJCQSxRQUFNZCxPQUFPLEdBQUcsSUFBSXBCLFlBQUdvQyxhQUFQLENBQXFCZixPQUFyQixDQUFoQjtBQUNBdEIsSUFBQUEsTUFBTSxDQUFDc0MsWUFBUCxDQUFvQmpCLE9BQXBCO0FBQ0EsUUFBTWtCLE1BQU0sR0FBR2pCLE9BQWY7QUFDQSxXQUFPakMsS0FBSyxDQUFDa0QsTUFBRCxDQUFaO0FBQ0QsR0FqRkQsQ0FpRkUsT0FBT0MsR0FBUCxFQUFZO0FBQ1osVUFBTUEsR0FBTjtBQUNEO0FBQ0YsQ0FyRkQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdm0gZnJvbSAndm0nXG5cbmZ1bmN0aW9uIGNsb25lKG9iaikge1xuICBpZiAobnVsbCA9PSBvYmogfHwgJ29iamVjdCcgIT0gdHlwZW9mIG9iaikgcmV0dXJuIG9ialxuICB2YXIgY29weSA9IG9iai5jb25zdHJ1Y3RvcigpXG4gIGZvciAodmFyIGF0dHIgaW4gb2JqKSB7XG4gICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgY29weVthdHRyXSA9IG9ialthdHRyXVxuICB9XG4gIHJldHVybiBjb3B5XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZXZhbENvbXBvbmVudENvZGUoY29kZSkge1xuICB0cnkge1xuICAgIGNvbnN0IHNjcmlwdCA9IG5ldyB2bS5TY3JpcHQoY29kZSwge30pXG5cbiAgICAvLyBGYWtlIHJlcXVpcmVcbiAgICBmdW5jdGlvbiBmYWtlUmVxdWlyZSgpIHt9XG4gICAgZmFrZVJlcXVpcmUuZGVmYXVsdCA9IGZha2VSZXF1aXJlXG5cbiAgICBsZXQgcmVxdWlyZVNhbmJveCA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgIC8vIGRlcGVuZGluZyBvbiB0aGUgcHJlc2V0IHRoYXQgb25lIGlzIHJ1bm5pbmcsXG4gICAgICAvLyBiYWJlbCB3aWxsIG5vdCBhbHdheXMgdXNlIHRoZSByb290IGludGVyb3BSZXF1aXJlRGVmYXVsdFxuICAgICAgLy8gZm9yIGJhYmVsIGVzNiwgaXQgdXNlcyAuLi4vYnVpbHRpbi9lczYvaW50ZXJvcC4uLlxuICAgICAgaWYgKC9AYmFiZWxbXFxcXCxcXC9dcnVudGltZSguKilcXC9oZWxwZXJzXFwvLippbnRlcm9wUmVxdWlyZURlZmF1bHQkLy50ZXN0KGVsZW1lbnQpKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZWxlbWVudCA9PT0gJ3Z1ZXgnKSB7XG4gICAgICAgIGNvbnN0IG91dHB1dFZ1ZXggPSB7XG4gICAgICAgICAgbWFwU3RhdGU6IGZ1bmN0aW9uKCkge30sXG4gICAgICAgICAgbWFwTXV0YXRpb25zOiBmdW5jdGlvbigpIHt9LFxuICAgICAgICAgIG1hcEdldHRlcnM6IGZ1bmN0aW9uKCkge30sXG4gICAgICAgICAgbWFwQWN0aW9uczogZnVuY3Rpb24oKSB7fSxcbiAgICAgICAgICBjcmVhdGVOYW1lc3BhY2VkSGVscGVyczogZnVuY3Rpb24oKSB7fSxcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLm91dHB1dFZ1ZXgsXG4gICAgICAgICAgZGVmYXVsdDogb3V0cHV0VnVleCxcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGVsZW1lbnQgPT09ICd2dWUnKSB7XG4gICAgICAgIGNvbnN0IG91dHB1dFZ1ZSA9IHtcbiAgICAgICAgICBfX2VzTW9kdWxlOiB0cnVlLFxuICAgICAgICAgIHVzZTogZnVuY3Rpb24gdXNlKCkge30sXG4gICAgICAgICAgZGlyZWN0aXZlOiBmdW5jdGlvbiB1c2UoKSB7fSxcbiAgICAgICAgICBjb21wb25lbnQ6IGZ1bmN0aW9uIGNvbXBvbmVudCgpIHt9LFxuICAgICAgICAgIGV4dGVuZGVkOiBmdW5jdGlvbiBleHRlbmRlZCgpIHt9LFxuICAgICAgICAgIGV4dGVuZChvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBvYmpcbiAgICAgICAgICB9LFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgLi4ub3V0cHV0VnVlLFxuICAgICAgICAgIGRlZmF1bHQ6IG91dHB1dFZ1ZSxcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZha2VSZXF1aXJlXG4gICAgfVxuICAgIHJlcXVpcmVTYW5ib3guY29udGV4dCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge31cbiAgICB9XG4gICAgY29uc3Qgc2FuZGJveCA9IHtcbiAgICAgIGV4cG9ydHM6IHt9LFxuICAgICAgbW9kdWxlOiB7XG4gICAgICAgIGV4cG9ydHM6IHt9LFxuICAgICAgfSxcbiAgICAgIHJlcXVpcmU6IHJlcXVpcmVTYW5ib3gsXG4gICAgICBkb2N1bWVudDoge30sXG4gICAgICB3aW5kb3c6IHtcbiAgICAgICAgbG9jYXRpb246IHt9LFxuICAgICAgfSxcbiAgICAgIGFsZXJ0KCkge30sXG4gICAgICBjb25maXJtKCkge30sXG4gICAgICBjb25zb2xlOiB7XG4gICAgICAgIGxvZygpIHt9LFxuICAgICAgICBkZWJ1ZygpIHt9LFxuICAgICAgfSxcbiAgICAgIHNlc3Npb25TdG9yYWdlOiB7XG4gICAgICAgIGdldEl0ZW0oKSB7fSxcbiAgICAgICAgc2V0SXRlbSgpIHt9LFxuICAgICAgICByZW1vdmVJdGVtKCkge30sXG4gICAgICB9LFxuICAgICAgbG9jYWxTdG9yYWdlOiB7XG4gICAgICAgIGdldEl0ZW0oKSB7fSxcbiAgICAgICAgc2V0SXRlbSgpIHt9LFxuICAgICAgICByZW1vdmVJdGVtKCkge30sXG4gICAgICB9LFxuICAgIH1cbiAgICBjb25zdCBjb250ZXh0ID0gbmV3IHZtLmNyZWF0ZUNvbnRleHQoc2FuZGJveClcbiAgICBzY3JpcHQucnVuSW5Db250ZXh0KGNvbnRleHQpXG4gICAgY29uc3Qgb3V0cHV0ID0gc2FuZGJveFxuICAgIHJldHVybiBjbG9uZShvdXRwdXQpXG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHRocm93IGVyclxuICB9XG59XG4iXX0=