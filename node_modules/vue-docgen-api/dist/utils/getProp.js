"use strict";var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports, "__esModule", { value: true });exports.default = getProp;var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));var _variables = require("./variables");
var _processTags = _interopRequireDefault(require("./processTags"));

var fnNameMatchRegex = /^\s*function\s+([^\(\s]*)\s*/;

function getTypeName(prop) {
  if (!prop) return _variables.UNDEFINED;
  if (Array.isArray(prop)) {
    return prop.map(getTypeNameToFunction).join('|');
  } else {
    return getTypeNameToFunction(prop);
  }
}

function getTypeNameToFunction(object) {
  if (object.name.toLowerCase() === 'function') return 'func';
  return object.name.toLowerCase();
}

function getProp(prop, docPart) {
  if (prop) {
    var obj = {};
    if (Array.isArray(prop)) {
      obj['type'] = {
        name: getTypeName(prop) };

    } else if (typeof prop === 'function') {
      obj['type'] = {
        name: getTypeName(prop) };

    } else {
      obj['type'] = {
        name: getTypeName(prop.type) };

      obj['required'] = prop.required || _variables.EMPTY;
      if ((0, _typeof2.default)(prop.default) !== _variables.UNDEFINED) {
        var value;
        var propDefaultIsFunc = false;
        if (typeof prop.default === 'function') {
          propDefaultIsFunc = true;
          if (!prop.type) {
            obj['type'] = { name: 'func' };
          }
          var func = prop.default.toString().replace(fnNameMatchRegex, 'function');
          value = JSON.parse(JSON.stringify(func.replace(/\s\s+/g, ' ')));
        } else {
          if (!prop.type) {
            obj['type'] = { name: (0, _typeof2.default)(prop.default) };
          }
          value = JSON.stringify(prop.default);
        }
        obj['defaultValue'] = {
          value: value,
          func: propDefaultIsFunc };

      }
    }
    obj['tags'] = (0, _processTags.default)(docPart, _variables.IGNORE_DEFAULT);
    obj['comment'] = (0, _variables.getComment)(docPart);
    obj['description'] = (0, _variables.getDescription)(docPart);
    return obj;
  } else {
    return {
      type: {
        name: _variables.UNDEFINED },

      required: false,
      description: _variables.EMPTY,
      tags: {} };

  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlscy9nZXRQcm9wLmpzIl0sIm5hbWVzIjpbImZuTmFtZU1hdGNoUmVnZXgiLCJnZXRUeXBlTmFtZSIsInByb3AiLCJVTkRFRklORUQiLCJBcnJheSIsImlzQXJyYXkiLCJtYXAiLCJnZXRUeXBlTmFtZVRvRnVuY3Rpb24iLCJqb2luIiwib2JqZWN0IiwibmFtZSIsInRvTG93ZXJDYXNlIiwiZ2V0UHJvcCIsImRvY1BhcnQiLCJvYmoiLCJ0eXBlIiwicmVxdWlyZWQiLCJFTVBUWSIsImRlZmF1bHQiLCJ2YWx1ZSIsInByb3BEZWZhdWx0SXNGdW5jIiwiZnVuYyIsInRvU3RyaW5nIiwicmVwbGFjZSIsIkpTT04iLCJwYXJzZSIsInN0cmluZ2lmeSIsIklHTk9SRV9ERUZBVUxUIiwiZGVzY3JpcHRpb24iLCJ0YWdzIl0sIm1hcHBpbmdzIjoiMFFBQUE7QUFDQTs7QUFFQSxJQUFNQSxnQkFBZ0IsR0FBRyw4QkFBekI7O0FBRUEsU0FBU0MsV0FBVCxDQUFxQkMsSUFBckIsRUFBMkI7QUFDekIsTUFBSSxDQUFDQSxJQUFMLEVBQVcsT0FBT0Msb0JBQVA7QUFDWCxNQUFJQyxLQUFLLENBQUNDLE9BQU4sQ0FBY0gsSUFBZCxDQUFKLEVBQXlCO0FBQ3ZCLFdBQU9BLElBQUksQ0FBQ0ksR0FBTCxDQUFTQyxxQkFBVCxFQUFnQ0MsSUFBaEMsQ0FBcUMsR0FBckMsQ0FBUDtBQUNELEdBRkQsTUFFTztBQUNMLFdBQU9ELHFCQUFxQixDQUFDTCxJQUFELENBQTVCO0FBQ0Q7QUFDRjs7QUFFRCxTQUFTSyxxQkFBVCxDQUErQkUsTUFBL0IsRUFBdUM7QUFDckMsTUFBSUEsTUFBTSxDQUFDQyxJQUFQLENBQVlDLFdBQVosT0FBOEIsVUFBbEMsRUFBOEMsT0FBTyxNQUFQO0FBQzlDLFNBQU9GLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZQyxXQUFaLEVBQVA7QUFDRDs7QUFFYyxTQUFTQyxPQUFULENBQWlCVixJQUFqQixFQUF1QlcsT0FBdkIsRUFBZ0M7QUFDN0MsTUFBSVgsSUFBSixFQUFVO0FBQ1IsUUFBSVksR0FBRyxHQUFHLEVBQVY7QUFDQSxRQUFJVixLQUFLLENBQUNDLE9BQU4sQ0FBY0gsSUFBZCxDQUFKLEVBQXlCO0FBQ3ZCWSxNQUFBQSxHQUFHLENBQUMsTUFBRCxDQUFILEdBQWM7QUFDWkosUUFBQUEsSUFBSSxFQUFFVCxXQUFXLENBQUNDLElBQUQsQ0FETCxFQUFkOztBQUdELEtBSkQsTUFJTyxJQUFJLE9BQU9BLElBQVAsS0FBZ0IsVUFBcEIsRUFBZ0M7QUFDckNZLE1BQUFBLEdBQUcsQ0FBQyxNQUFELENBQUgsR0FBYztBQUNaSixRQUFBQSxJQUFJLEVBQUVULFdBQVcsQ0FBQ0MsSUFBRCxDQURMLEVBQWQ7O0FBR0QsS0FKTSxNQUlBO0FBQ0xZLE1BQUFBLEdBQUcsQ0FBQyxNQUFELENBQUgsR0FBYztBQUNaSixRQUFBQSxJQUFJLEVBQUVULFdBQVcsQ0FBQ0MsSUFBSSxDQUFDYSxJQUFOLENBREwsRUFBZDs7QUFHQUQsTUFBQUEsR0FBRyxDQUFDLFVBQUQsQ0FBSCxHQUFrQlosSUFBSSxDQUFDYyxRQUFMLElBQWlCQyxnQkFBbkM7QUFDQSxVQUFJLHNCQUFPZixJQUFJLENBQUNnQixPQUFaLE1BQXdCZixvQkFBNUIsRUFBdUM7QUFDckMsWUFBSWdCLEtBQUo7QUFDQSxZQUFJQyxpQkFBaUIsR0FBRyxLQUF4QjtBQUNBLFlBQUksT0FBT2xCLElBQUksQ0FBQ2dCLE9BQVosS0FBd0IsVUFBNUIsRUFBd0M7QUFDdENFLFVBQUFBLGlCQUFpQixHQUFHLElBQXBCO0FBQ0EsY0FBSSxDQUFDbEIsSUFBSSxDQUFDYSxJQUFWLEVBQWdCO0FBQ2RELFlBQUFBLEdBQUcsQ0FBQyxNQUFELENBQUgsR0FBYyxFQUFFSixJQUFJLEVBQUUsTUFBUixFQUFkO0FBQ0Q7QUFDRCxjQUFJVyxJQUFJLEdBQUduQixJQUFJLENBQUNnQixPQUFMLENBQWFJLFFBQWIsR0FBd0JDLE9BQXhCLENBQWdDdkIsZ0JBQWhDLEVBQWtELFVBQWxELENBQVg7QUFDQW1CLFVBQUFBLEtBQUssR0FBR0ssSUFBSSxDQUFDQyxLQUFMLENBQVdELElBQUksQ0FBQ0UsU0FBTCxDQUFlTCxJQUFJLENBQUNFLE9BQUwsQ0FBYSxRQUFiLEVBQXVCLEdBQXZCLENBQWYsQ0FBWCxDQUFSO0FBQ0QsU0FQRCxNQU9PO0FBQ0wsY0FBSSxDQUFDckIsSUFBSSxDQUFDYSxJQUFWLEVBQWdCO0FBQ2RELFlBQUFBLEdBQUcsQ0FBQyxNQUFELENBQUgsR0FBYyxFQUFFSixJQUFJLHdCQUFTUixJQUFJLENBQUNnQixPQUFkLENBQU4sRUFBZDtBQUNEO0FBQ0RDLFVBQUFBLEtBQUssR0FBR0ssSUFBSSxDQUFDRSxTQUFMLENBQWV4QixJQUFJLENBQUNnQixPQUFwQixDQUFSO0FBQ0Q7QUFDREosUUFBQUEsR0FBRyxDQUFDLGNBQUQsQ0FBSCxHQUFzQjtBQUNwQkssVUFBQUEsS0FBSyxFQUFMQSxLQURvQjtBQUVwQkUsVUFBQUEsSUFBSSxFQUFFRCxpQkFGYyxFQUF0Qjs7QUFJRDtBQUNGO0FBQ0ROLElBQUFBLEdBQUcsQ0FBQyxNQUFELENBQUgsR0FBYywwQkFBWUQsT0FBWixFQUFxQmMseUJBQXJCLENBQWQ7QUFDQWIsSUFBQUEsR0FBRyxDQUFDLFNBQUQsQ0FBSCxHQUFpQiwyQkFBV0QsT0FBWCxDQUFqQjtBQUNBQyxJQUFBQSxHQUFHLENBQUMsYUFBRCxDQUFILEdBQXFCLCtCQUFlRCxPQUFmLENBQXJCO0FBQ0EsV0FBT0MsR0FBUDtBQUNELEdBekNELE1BeUNPO0FBQ0wsV0FBTztBQUNMQyxNQUFBQSxJQUFJLEVBQUU7QUFDSkwsUUFBQUEsSUFBSSxFQUFFUCxvQkFERixFQUREOztBQUlMYSxNQUFBQSxRQUFRLEVBQUUsS0FKTDtBQUtMWSxNQUFBQSxXQUFXLEVBQUVYLGdCQUxSO0FBTUxZLE1BQUFBLElBQUksRUFBRSxFQU5ELEVBQVA7O0FBUUQ7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVNUFRZLCBVTkRFRklORUQsIElHTk9SRV9ERUZBVUxULCBnZXREZXNjcmlwdGlvbiwgZ2V0Q29tbWVudCB9IGZyb20gJy4vdmFyaWFibGVzJ1xuaW1wb3J0IHByb2Nlc3NUYWdzIGZyb20gJy4vcHJvY2Vzc1RhZ3MnXG5cbmNvbnN0IGZuTmFtZU1hdGNoUmVnZXggPSAvXlxccypmdW5jdGlvblxccysoW15cXChcXHNdKilcXHMqL1xuXG5mdW5jdGlvbiBnZXRUeXBlTmFtZShwcm9wKSB7XG4gIGlmICghcHJvcCkgcmV0dXJuIFVOREVGSU5FRFxuICBpZiAoQXJyYXkuaXNBcnJheShwcm9wKSkge1xuICAgIHJldHVybiBwcm9wLm1hcChnZXRUeXBlTmFtZVRvRnVuY3Rpb24pLmpvaW4oJ3wnKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBnZXRUeXBlTmFtZVRvRnVuY3Rpb24ocHJvcClcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRUeXBlTmFtZVRvRnVuY3Rpb24ob2JqZWN0KSB7XG4gIGlmIChvYmplY3QubmFtZS50b0xvd2VyQ2FzZSgpID09PSAnZnVuY3Rpb24nKSByZXR1cm4gJ2Z1bmMnXG4gIHJldHVybiBvYmplY3QubmFtZS50b0xvd2VyQ2FzZSgpXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFByb3AocHJvcCwgZG9jUGFydCkge1xuICBpZiAocHJvcCkge1xuICAgIGxldCBvYmogPSB7fVxuICAgIGlmIChBcnJheS5pc0FycmF5KHByb3ApKSB7XG4gICAgICBvYmpbJ3R5cGUnXSA9IHtcbiAgICAgICAgbmFtZTogZ2V0VHlwZU5hbWUocHJvcCksXG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgcHJvcCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgb2JqWyd0eXBlJ10gPSB7XG4gICAgICAgIG5hbWU6IGdldFR5cGVOYW1lKHByb3ApLFxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBvYmpbJ3R5cGUnXSA9IHtcbiAgICAgICAgbmFtZTogZ2V0VHlwZU5hbWUocHJvcC50eXBlKSxcbiAgICAgIH1cbiAgICAgIG9ialsncmVxdWlyZWQnXSA9IHByb3AucmVxdWlyZWQgfHwgRU1QVFlcbiAgICAgIGlmICh0eXBlb2YgcHJvcC5kZWZhdWx0ICE9PSBVTkRFRklORUQpIHtcbiAgICAgICAgbGV0IHZhbHVlXG4gICAgICAgIGxldCBwcm9wRGVmYXVsdElzRnVuYyA9IGZhbHNlXG4gICAgICAgIGlmICh0eXBlb2YgcHJvcC5kZWZhdWx0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcHJvcERlZmF1bHRJc0Z1bmMgPSB0cnVlXG4gICAgICAgICAgaWYgKCFwcm9wLnR5cGUpIHtcbiAgICAgICAgICAgIG9ialsndHlwZSddID0geyBuYW1lOiAnZnVuYycgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgZnVuYyA9IHByb3AuZGVmYXVsdC50b1N0cmluZygpLnJlcGxhY2UoZm5OYW1lTWF0Y2hSZWdleCwgJ2Z1bmN0aW9uJylcbiAgICAgICAgICB2YWx1ZSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZnVuYy5yZXBsYWNlKC9cXHNcXHMrL2csICcgJykpKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghcHJvcC50eXBlKSB7XG4gICAgICAgICAgICBvYmpbJ3R5cGUnXSA9IHsgbmFtZTogdHlwZW9mIHByb3AuZGVmYXVsdCB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhbHVlID0gSlNPTi5zdHJpbmdpZnkocHJvcC5kZWZhdWx0KVxuICAgICAgICB9XG4gICAgICAgIG9ialsnZGVmYXVsdFZhbHVlJ10gPSB7XG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgZnVuYzogcHJvcERlZmF1bHRJc0Z1bmMsXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgb2JqWyd0YWdzJ10gPSBwcm9jZXNzVGFncyhkb2NQYXJ0LCBJR05PUkVfREVGQVVMVClcbiAgICBvYmpbJ2NvbW1lbnQnXSA9IGdldENvbW1lbnQoZG9jUGFydClcbiAgICBvYmpbJ2Rlc2NyaXB0aW9uJ10gPSBnZXREZXNjcmlwdGlvbihkb2NQYXJ0KVxuICAgIHJldHVybiBvYmpcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZToge1xuICAgICAgICBuYW1lOiBVTkRFRklORUQsXG4gICAgICB9LFxuICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgICAgZGVzY3JpcHRpb246IEVNUFRZLFxuICAgICAgdGFnczoge30sXG4gICAgfVxuICB9XG59XG4iXX0=